<?xml version="1.0" ?>
<ccxml version="1.0">
    <!-- Last Modified 06/04/2010
       *   @Name	Conference.ccxml
       *   @Desc	Manages conference activities -->

    <!-- These variables are passed in from the ccxml layer -->
    <var name="II_SB_status"/>
    <var name="II_SB_NEXT_OPTION"/>
    <var name="II_SB_remote"/>
    <var name="II_SB_local"/>
    <var name="II_SB_originator"/>
    <var name="II_SB_protocol"/>
    <var name="II_SB_connectionID"/>
    <var name="II_SB_type"/>
    <var name="II_SB_CODE_DIR"/>
    <var name="II_SB_BASE_DIR"/>
    <var name="II_SB_confid"/>
    <var name="II_SB_passValues"/>
    <var name="II_SB_ibcallid"/>
    <var name="II_SB_VXML_LIB"/>
    <var name="II_SB_projectSource"/>
    <var name="II_SB_obcallid"/>

    <!-- spotbuild Options -->
    <var name="II_SB_nxtOpt" expr="''"/>            <!-- Value of next vxml template -->
    <var name="II_SB_confUserStatus" expr="''"/>    <!-- Describes 'Active' or 'Passive' conference member -->
    <var name="II_SB_userHangupOpt" expr="''"/>     <!-- Option to execute when a member hangs up -->
    <var name="II_SB_keyPressOpt" expr="''"/>       <!-- Option to execute when a member activates drop key -->

    <!-- Global variables -->
    <var name="II_SB_state" expr="'idle'"/>         <!-- state. This variable holds the CCXML dialog state -->    
    <var name="II_SB_dialogID" expr="''"/>          <!-- dialogID. Contains the ID for the last vxml dialog that was started -->
    <var name="II_SB_sessionID" expr="''"/>         <!-- sessionID. Contains the ID of the ccxml session -->
    <var name="II_SB_indialog" expr="'false'"/>     <!-- indialog. Identifies if application is currently running a vxml dialog -->
    <var name="II_SB_userEntry" expr="''"/>	        <!-- Drop key presses -->
    <var name="II_SB_confName" expr="''"/>	        <!-- conference name from caller input -->
	<var name="II_SB_Listeners" expr="''"/>         <!-- Number of reserved listners -->
	<var name="II_SB_Talkers" expr="''"/>           <!-- Number of reserved talkers  -->
    <var name="II_SB_dropKey_enabled" expr="''"/>   <!-- Identifies if application should monitor key presses -->
    <var name="II_SB_drpKeyTime" expr="''"/>        <!-- Identifies max time between key presses (for drop key sequence) -->
    <var name="II_SB_drpKeyLength" expr="''"/>      <!-- Identifies number of digits in drop key sequence -->
    <var name="II_SB_hangUpDetect" expr="'n'"/>     <!-- Flag to detect user hang up -->
    <var name="II_SB_playEntryAudio" expr="''"/>    <!-- Flag to identify if entry audio has been played to conference -->
    <var name="II_SB_audioFile" expr="''"/>         <!-- URL of audio file -->
	<var name="II_SB_conferenceID" expr="''"/>      <!-- System generated ID for conference -->
	<var name="II_SB_memberCount" expr="''"/>       <!-- Number of members in conference -->

	<!-- Disconnect variables -->
	<var name="II_SB_discID" expr="''"/>			<!-- Contains the connection id of party that triggered connection.disconnected event -->
	<var name="II_SB_discReason" expr="''"/>		<!-- Contains platform specific reason for disconnect -->
	<var name="II_SB_discOriginator" expr="''"/>	<!-- Identifies party that triggered connection.disconnected event -->

    <!-- load javascript library -->
    <script src="file:/interact/apps/spotbuild/lib/js/lib.js"></script>

    <!-- Begin executable code -->
    <eventprocessor statevariable="II_SB_state">

	    <transition state="idle" event="ccxml.loaded" name="loadEv"> <!-- Load CCXML file. Log status and update state -->
            <log>INFO: Entered conference.ccxml [116-8]</log>
            <log>INFO: transition event [<value expr="loadEv.name"/>] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_sessionID" expr="loadEv.sessionid"/>
            <assign name="II_SB_state" expr="'loaded'"/>
            <log>INFO: II_SB_passValues [<value expr="II_SB_passValues"/>]</log>

            <!-- Populating global variables. The values contained in the passValues variable are sent in from the previous ccxml file -->
            <assign name="II_SB_keyPressOpt" expr="getNextElement(0,II_SB_passValues,'|')"/>
            <assign name="II_SB_confUserStatus" expr="getNextElement(1,II_SB_passValues,'|')"/>
            <assign name="II_SB_confName" expr="getNextElement(2,II_SB_passValues,'|')"/>
            <assign name="II_SB_userHangupOpt" expr="getNextElement(3,II_SB_passValues,'|')"/>
            <assign name="II_SB_Listeners" expr="getNextElement(4,II_SB_passValues,'|')"/>
            <assign name="II_SB_Talkers" expr="getNextElement(5,II_SB_passValues,'|')"/>
            <assign name="II_SB_drpKeyLength" expr="getNextElement(6,II_SB_passValues,'|')"/>
            <assign name="II_SB_drpKeyTime" expr="getNextElement(7,II_SB_passValues,'|')"/>
            <assign name="II_SB_dropKey_enabled" expr="getNextElement(8,II_SB_passValues,'|')"/>
            <assign name="II_SB_playEntryAudio" expr="getNextElement(9,II_SB_passValues,'|')"/>
            <assign name="II_SB_audioFile" expr="getNextElement(10,II_SB_passValues,'|')"/>

            <log>INFO: Hang up option [<value expr="II_SB_userHangupOpt"/>]</log>
            <log>INFO: Drop key option [<value expr="II_SB_keyPressOpt"/>]</log>
            <log>INFO: User status [<value expr="II_SB_confUserStatus"/>]</log>
            <log>INFO: Conference name [<value expr="II_SB_confName"/>]</log>
            <log>INFO: Number of passive members [<value expr="II_SB_Listeners"/>]</log>
            <log>INFO: Number of active members [<value expr="II_SB_Talkers"/>]</log>
            <log>INFO: Drop key enabled [<value expr="II_SB_dropKey_enabled"/>]</log>
            <log>INFO: Number of drop key digits [<value expr="II_SB_drpKeyLength"/>]</log>
            <log>INFO: Inter digit timeout [<value expr="II_SB_drpKeyTime"/>]</log>
            <log>INFO: Play audio on entry [<value expr="II_SB_playEntryAudio"/>]</log>
            <log>INFO: Audio file(s) [<value expr="II_SB_audioFile"/>]</log>
			
      		<assign name="II_SB_state" expr="'creatConf'"/>
       		<createconference conferenceid="II_SB_confid" confname="II_SB_confName" reservedtalkers="II_SB_Talkers" reservedlisteners="II_SB_Listeners"/>
    	</transition>

    	<transition state="creatConf" event="conference.created" name="evt">
            <!-- This transition occurs as a result of the <createconference> tag. Here we save off
            the system generated conference ID and call the join member transition -->
            <log>INFO: transition event [conference.created] state [<value expr="II_SB_state"/>]</log>
	        <log>INFO: Conference created</log>
	        <log>INFO: II_SB_confid [<value expr="II_SB_confid"/>]</log>
	        <log>INFO: II_SB_confName [<value expr="II_SB_confName"/>]</log>
	        <assign name="II_SB_conferenceID" expr="II_SB_confid"/>
            <send data="'dialog.user.joinMember'" target="II_SB_sessionID"/>
    	</transition>

        <transition event="dialog.user.joinMember">
            <!-- Here we attempt a join to the conference based on the user's active or passive status -->
            <log>INFO: transition event [dialog.user.joinMember] state [<value expr="II_SB_state"/>]</log>
	        <assign name="II_SB_state" expr="'joinConf'"/>
   	        <if cond="II_SB_confUserStatus == 'Passive'">
                <log>INFO: Joining user as [Passive]</log>
    		    <join id1="II_SB_ibcallid" id2="II_SB_confid" duplex="'half'"/>
	        <else/>
                <log>INFO: Joining user as [Active]</log>
    		    <join id1="II_SB_ibcallid" id2="II_SB_confid"/>
	        </if>
        </transition>

        <transition state="joinConf" event="conference.joined" name="evt" cond="evt.id1 == II_SB_ibcallid">
            <!-- Our join attempt was successful. We track the conference member count and update the vxml
            layer with the conference id and member count -->
            <log>INFO: transition event [conference.joined] state [<value expr="II_SB_state"/>]</log>
            <log>INFO: Member count [<value expr="evt.membercount"/>]</log>
	        <assign name="II_SB_memberCount" expr="evt.membercount"/>
            <assign name="II_SB_state" expr="'setVXML'"/>
            <var name="II_SB_fromCCXML" expr="'setVars'"/>
  		    <dialogstart src="'file:' + II_SB_CODE_DIR + '116-8.vxml'" namelist="II_SB_conferenceID II_SB_memberCount II_SB_fromCCXML"/>
        </transition>

        <transition state="setVXML" event="dialog.exit" name="event">
            <!-- Back from setting the variables in vxml. Let's check what our next action should be -->
    	    <log>INFO: transition event [<value expr="event.name"/>] state [<value expr="II_SB_state"/>]</log>
            <if cond="((II_SB_playEntryAudio == 'Yes') &amp;&amp; (II_SB_audioFile.length &gt; 0))">
                <send data="'dialog.user.announceMember'" target="II_SB_sessionID"/>
            <else/>
                <send data="'dialog.user.chkDropKey'" target="II_SB_sessionID"/>
            </if>
        </transition>

        <transition event="dialog.user.announceMember">
            <!-- Here we play audio to the conference -->
            <log>INFO: transition event [dialog.user.announceMember] state [<value expr="II_SB_state"/>]</log>
	        <assign name="II_SB_state" expr="'announceMember'"/>
            <var name="II_SB_promptID" expr="II_SB_audioFile"/>
            <var name="II_SB_FLD_INTERRUPT" expr="'false'"/>
            <var name="II_SB_FLD_TIMEOUT" expr="''"/>
            <var name="II_SB_repeat" expr="'n'"/>
            <dialogstart connectionid="II_SB_confid" src="'file:/interact/apps/spotbuild/lib/vxml/audioPlayBack.vxml'" namelist="II_SB_repeat II_SB_promptID II_SB_FLD_INTERRUPT II_SB_FLD_TIMEOUT"/>
        </transition>

        <transition state="announceMember" event="dialog.exit" name="event">
            <!-- Back from playing audio to the conference. We join the caller to a voice channel to ensure
            that we haven't lost that capability. This is a work around for an existing voice switching issue -->
    	    <log>INFO: transition event [<value expr="event.name"/>] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_indialog" expr="'false'"/>
            <assign name="II_SB_state" expr="'getVoice'"/>
            <join id1="II_SB_ibcallid" id2="'VXML_CHANNEL'"/>
        </transition>

        <transition state="getVoice" event="conference.joined" name="evt" cond="evt.id1 == II_SB_ibcallid">
            <!-- Our join to the voice channel was successful. We need to check what our next action should be -->
            <log>INFO: transition event [conference.joined] state [<value expr="II_SB_state"/>]</log>
            <send data="'dialog.user.chkDropKey'" target="II_SB_sessionID"/>
        </transition>

        <transition event="dialog.user.chkDropKey">
            <!-- Here we determine if member key presses should be monitored -->
            <log>INFO: transition event [dialog.user.chkDropKey] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_state" expr="'exitMenu'"/>
            <if cond="II_SB_dropKey_enabled == 'true'">
            	<dialogstart src="'file:'+II_SB_VXML_LIB+'dropKey.vxml'" namelist="II_SB_drpKeyLength II_SB_drpKeyTime"/>
            <else/>
                <!-- We're in the conference -->
            </if>
        </transition>

        <transition state="exitMenu" event="dialog.exit" name="event">
            <!-- Caller has entered correct number of digits for drop key. We'll save caller's input, unjoin caller from 
            conference and transfer control to the drop key option -->
    	    <log>INFO: transition event [<value expr="event.name"/>] state [<value expr="II_SB_state"/>]</log>
    	    <log>INFO: Menu key pressed</log>
            <assign name="II_SB_indialog" expr="'false'"/>
	        <assign name="II_SB_userEntry" expr="event.values.userInput"/>
            <assign name="II_SB_NEXT_OPTION" expr="II_SB_keyPressOpt"/>
            <log>INFO: User input [<value expr="II_SB_userEntry"/>]</log>
        	<unjoin id1="II_SB_confid" id2="II_SB_ibcallid"/>	<!-- Unjoin inbound leg from conference -->
        </transition>

        <transition state="exitMenu" event="conference.unjoined" name="evt" cond="evt.id2 == II_SB_ibcallid">
            <!-- Our unjoin from the conference was successful. We need to check what our next action should be -->
            <log>INFO: transition event [conference.joined] state [<value expr="II_SB_state"/>]</log>
            <send data="'dialog.user.nextVXML'" target="II_SB_sessionID"/>
        </transition>

        <transition event="connection.disconnected" name="evt" cond="evt.connectionid == II_SB_obcallid">
            <!-- Catch the disconnect of the out bound connection id. This occurs when a conference participant
            initiated a call (and probably put that call on hold) before joining the conference. At this point,
            we'll just blank out the connection id of the out bound call. This will prevent us from attempting to
            rejoin the call later. -->
            <log>INFO: transition event [connection.disconnected] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_obcallid" expr="''"/>
        </transition>

		<transition event="connection.disconnected" name="evt" cond="evt.connectionid == II_SB_ibcallid">
            <!-- Here we catch the disconnect triggered by a conference participant. We'll save off some relevant
            information and call the next transition to figure out where to go. -->
            <log>INFO: transition event [connection.disconnected] state [<value expr="II_SB_state"/>]</log>
            <log>INFO: II_SB_passValues [<value expr="II_SB_passValues"/>]</log>
            <assign name="II_SB_ibcallid" expr="''"/>
            <assign name="II_SB_hangUpDetect" expr="'y'"/>
            <assign name="II_SB_NEXT_OPTION" expr="II_SB_userHangupOpt"/>
            <assign name="II_SB_state" expr="'conferenceDisconnected'"/>
			<assign name="II_SB_discID" expr="evt.connectionid"/>
			<assign name="II_SB_discReason" expr="evt.reason"/>
			<assign name="II_SB_discOriginator" expr="evt.connection.originator"/>
            <if cond="II_SB_indialog == 'true'">    <!-- Terminate vxml dialog if neccessary -->
                <send data="'dialog.user.termDialog'" target="II_SB_sessionID"/>
            <else/>
                <send data="'dialog.user.nextVXML'" target="II_SB_sessionID"/>
            </if>
        </transition>

        <transition state="conferenceDisconnected" event="dialog.exit">
            <!-- Back from terminating vxml dialog -->
            <log>INFO: transition event [dialog.exit] state [<value expr="II_SB_state"/>]</log>
            <log>INFO: Dialog has been terminated after user Hangup</log>
            <assign name="II_SB_indialog" expr="'false'"/>
            <send data="'dialog.user.nextVXML'" target="II_SB_sessionID"/>
        </transition>

        <transition event="dialog.user.nextVXML">
            <!-- In this transition, we determine if the next option variable is set to a real value. If so,
            we'll first go back into the conference.vxml (to set up some global variables) and then transition
            to the value of the next option variable -->
            <log>INFO: transition event [dialog.user.nextVXML] state [<value expr="II_SB_state"/>]</log>
            <log>INFO: II_SB_NEXT_OPTION [<value expr="II_SB_NEXT_OPTION"/>]</log>
            <if cond="II_SB_NEXT_OPTION == ''|| II_SB_NEXT_OPTION == undefined">
                <!-- If next option variable is not set, let's check if we need to run the hang up logic.
                If we don't need to, we'll just end this session -->
                <if cond="II_SB_hangUpDetect == 'y'">
                    <send data="'dialog.user.hangup'" target="II_SB_sessionID"/>    <!-- Go run hang up logic -->
                <else/>
                    <assign name="II_SB_state" expr="'endCall'"/>
                    <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
                </if>
            <else/>
                <!-- Next option is set. The 'id' variable contains the file name for the conference.vxml template -->
            	<assign name="II_SB_state" expr="'nextOptionRun'"/>
                <var name="II_SB_fromCCXML" expr="'conf_116-8'"/>
  		    	<dialogstart src="'file:' + II_SB_CODE_DIR + '116-8.vxml'" namelist="II_SB_conferenceID II_SB_memberCount II_SB_userEntry II_SB_ibcallid II_SB_NEXT_OPTION II_SB_fromCCXML"/>
            </if>
        </transition>

        <transition state="nextOptionRun endCall" event="dialog.exit" name="evt">   <!-- Return from vxml dialog -->
            <log>INFO: transition event [dialog.exit] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_indialog" expr="'false'"/>
            <assign name="II_SB_status" expr="evt.values.II_SB_status"/>
      		<assign name="II_SB_NEXT_OPTION" expr="evt.values.II_SB_nextOpt"/>
            <log>INFO: status to check on the dialog.exit [<value expr="II_SB_status"/>]</log>
            <if cond="(II_SB_status == 'endCall') || (II_SB_status == 'hangup') || (II_SB_state == 'endCall')">
                <log>INFO: End call</log>
                <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
            <elseif cond="II_SB_status == 'outDialCheck'"/>
                <log>INFO: Checking Out Dial status</log>
                <var name="II_SB_fromCCXML" expr="'true'"/>
                <dialogstart src="'file:' + II_SB_CODE_DIR + II_SB_NEXT_OPTION + '.vxml'" namelist="II_SB_obcallid II_SB_fromCCXML"/>
            <elseif cond="II_SB_status == 'transfer'"/>
                <log>INFO: Transfering to a new program</log>
                <var name="II_SB_transfer" expr="'yes'"/>
                <assign name="II_SB_projectSource" expr="'listen_conference'"/>
                <var name="II_SB_importedValue" expr="evt.values.II_SB_valueToPass"/>
		        <fetch next="'file:' + II_SB_BASE_DIR + II_SB_NEXT_OPTION + '/begin.ccxml'" namelist="II_SB_VXML_LIB II_SB_status II_SB_local II_SB_remote II_SB_originator II_SB_protocol II_SB_connectionID II_SB_type	II_SB_ibcallid II_SB_transfer II_SB_projectSource II_SB_obcallid II_SB_importedValue"/>
            <else/>
		        <assign name="II_SB_passValues" expr="evt.values.II_SB_returnValues"/>
        		<log>INFO: II_SB_NEXT_OPTION [<value expr="II_SB_NEXT_OPTION"/>]</log>
        		<log>INFO: II_SB_passValues [<value expr="II_SB_passValues"/>]</log>
        		<fetch next="'file:' + II_SB_CODE_DIR + II_SB_NEXT_OPTION + '.ccxml'" namelist="II_SB_VXML_LIB II_SB_status II_SB_NEXT_OPTION II_SB_local II_SB_remote II_SB_originator II_SB_protocol II_SB_connectionID II_SB_type II_SB_CODE_DIR II_SB_BASE_DIR II_SB_ibcallid II_SB_confid II_SB_passValues II_SB_projectSource II_SB_obcallid"/>
            </if>
        </transition>

        <transition event="dialog.user.basichttp" name="evt">
            <!-- This transition is triggered when an external component sends an event to the ccxml session.
            Here, we grab the data associated with the event and attempt to process it at the ccxml layer -->
            <log>INFO: transition event [dialog.user.basichttp] state [<value expr="II_SB_state"/>]</log>
            <log>INFO: Event [<value expr="evt.II_SB_basichttpEvent"/>]</log>
            <if cond="evt.II_SB_basichttpEvent == 'CREATESESSION'">
                <log>INFO: uri [<value expr="evt.II_SB_URI"/>]</log>
                <log>INFO: argument [<value expr="evt.II_SB_argument"/>]</log>
                <var name="uri" expr="'file:' + II_SB_BASE_DIR + evt.II_SB_URI"/>
                <assign name="II_SB_importedValue" expr="evt.II_SB_argument + '?' + II_SB_conferenceID + '?' + II_SB_memberCount"/>
                <log>INFO: Sending: [<value expr="uri + ' ' + II_SB_importedValue"/>]</log>
                <send data="'httpCreateSession'" targettype="'basichttp'" target="'http://localhost/spot/ccxml/createsession'" namelist="uri II_SB_importedValue"/>
            <else/>
                <!-- Future events -->
            </if>
        </transition>

        <transition event="dialog.user.customEvent" name="evt">
            <!-- This transition is triggered when another ccxml session sends an event over. Here, we
            grab the data associated with the event and attempt to process it at the vxml layer -->
            <log>INFO: transition event [dialog.user.customEvent] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_state" expr="'customEvent'"/>
            <assign name="II_SB_passValues" expr="evt.II_SB_eventToPass + '|' + evt.II_SB_valueToPass"/>
            <unjoin id1="II_SB_confid" id2="II_SB_ibcallid"/>   <!-- First unjoin caller from conference -->
        </transition>

        <transition state="customEvent" event="conference.unjoined" name="evt" cond="evt.id2 == II_SB_ibcallid">
            <!-- Our unjoin from the conference was successful. We need to check what our next action should be -->
            <log>INFO: transition event [conference.unjoined] state [<value expr="II_SB_state"/>]</log>
            <if cond="II_SB_indialog == 'true'">    <!-- If caller is in a vxml dialog, terminate dialog -->
                <send data="'dialog.user.termDialog'" target="II_SB_sessionID"/>
            <else/>
              	<assign name="II_SB_state" expr="'nextOptionRun'"/>
	        	<dialogstart src="'file:' + II_SB_CODE_DIR + 'customEvent.vxml'" namelist="II_SB_ibcallid II_SB_passValues"/>
            </if>
        </transition>

        <transition state="customEvent" event="dialog.exit">
            <!-- Returned from dialog terminate (after receiving a custom event). Call the custom event vxml logic -->
			<log>INFO: transition event [dialog.exit] state [<value expr="II_SB_state"/>]</log>
            <var name="II_SB_indialog" expr="'false'"/>
          	<assign name="II_SB_state" expr="'nextOptionRun'"/>
	    	<dialogstart src="'file:' + II_SB_CODE_DIR + 'customEvent.vxml'" namelist="II_SB_ibcallid II_SB_passValues"/>
        </transition>

		<transition event="dialog.user.hangup" name="evt">
            <!-- This transition calls a lib file that checks if there's a hang up vxml file for this project -->
			<log>INFO: transition event [dialog.user.hangup] state [<value expr="II_SB_state"/>]</log>
            <var name="II_SB_file1" expr="II_SB_CODE_DIR + 'hang-up.vxml'"/>
            <var name="II_SB_file2" expr="''"/>
            <var name="II_SB_fileOprtn" expr="'stat'"/>
			<assign name="II_SB_state" expr="'hangUp'"/>
            <dialogstart src="'file:' + II_SB_BASE_DIR + 'lib/vxml/fileUtil.vxml'" namelist="II_SB_file1 II_SB_file2 II_SB_fileOprtn"/> <!-- Check for Hangup logic -->
		</transition>

        <transition state="hangUp" event="dialog.exit" name="evt">
            <!-- We've returned from checking for a hang up file. If we found one, we'll go run the hang up logic.
            Otherwise, we'll end the session -->
            <log>INFO: transition event [dialog.exit] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_state" expr="'endCall'"/>
            <assign name="II_SB_indialog" expr="'false'"/>
            <if cond="evt.values.II_SB_status != 'Failure'">
                <if cond="evt.values.II_SB_fileSize != ''">
                    <log>INFO: Found hang up node</log>
                    <dialogstart src="'file:' + II_SB_CODE_DIR + 'hang-up.vxml'" namelist="II_SB_discID II_SB_discReason II_SB_discOriginator"/>
                <else/>
                    <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
                </if>
            <else/>
                <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
            </if>
        </transition>

        <transition event="fetch.done" name="evt">  <!-- Fetched ccxml document -->
            <log>INFO: transition event [fetch.done] state [<value expr="II_SB_state"/>]</log>
            <goto fetchid="evt.fetchid"/> <!-- Go to ccxml document -->
        </transition>

        <transition event="dialog.started" name="evt">  <!-- Started VXML dialog -->
            <log>INFO: transition event [dialog.started] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_indialog" expr="'true'"/>
            <assign name="II_SB_dialogID" expr="evt.dialogid"/>
            <log>INFO: dialogID in the dialog.started [<value expr="II_SB_dialogID"/>]</log>
        </transition>

	    <transition event="dialog.user.termDialog"> <!-- Terminates the currently running dialog. -->
            <log>INFO: transition event [dialog.user.termDialog] state [<value expr="II_SB_state"/>]</log>
            <log>INFO: Terminating dialog [ <value expr="II_SB_dialogID" /> ]</log>
            <dialogterminate dialogid="II_SB_dialogID"/>
        </transition>

        <transition event="error.dialog.notstarted" name="evt"> <!-- Catch dialog not started -->
            <log>INFO: transition event [<value expr="evt.name"/>] state [<value expr="II_SB_state"/>]</log>
            <log>ERROR: Unable to start Dialog. REASON [<value expr="evt.reason"/>]</log>
            <assign name="II_SB_state" expr="'endCall'"/>
            <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
        </transition>

        <transition event="error.fetch" name="evt"> <!-- Catch fetch error -->
            <log>INFO: transition event [<value expr="evt.name"/>] state [<value expr="II_SB_state"/>]</log>
            <log>ERROR: Unable to fetch document. REASON [<value expr="evt.reason"/>]</log>            
            <assign name="II_SB_state" expr="'endCall'"/>
            <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
        </transition>

        <transition event="error.dialog.semantic" name="evt">   <!-- Catch errors -->
            <log>INFO: transition event [error.dialog.semantic] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_state" expr="'endCall'"/>
            <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
        </transition>

        <transition event="err*" name="errEV">
            <log>INFO: transition event [err*] state [<value expr="II_SB_state"/>]</log>
            <log>ERROR: REASON [<value expr="errEv.reason"/>]</log>
            <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
        </transition>

        <transition event="dialog.user.endCall">    <!-- Exit ccxml layer -->
            <log>INFO: transition event [dialog.user.endCall] state [<value expr="II_SB_state"/>]</log>
            <exit/>
        </transition>

    </eventprocessor>
</ccxml>
