<?xml version="1.0"?>
<!-- Load root.vxml which contains global variables and reference to javascript library file -->
<vxml version="2.0" application="file:/interact/apps/spotbuild/listen_autoDial/root.vxml"> <!--  Set location of root document -->
    <!-- Last Modified 05/05/2010
       *   @Name	Audio-prompt.vxml
       *   @Desc	This script allows a developer play audio / speech
       			   	and collect user inputs. An MRCP server is needed for speech. -->
    <!-- Operators
        P :Prompt
        D :Date
        C :Currency
        N :Number
        V :Digits
        S :Speech
        T :Time 
        E :Streaming-->

    <property name="bargein" value="true"/>     <!-- Default bargein to true -->
    <property name="inputmodes" value="dtmf"/>  <!-- Default inputmodes to dtmf -->
    <property name="termchar" value=""/>        <!-- Default terminating character to nothing -->
    <property name="timeout" value="0s"/>       <!-- Default timeout property to zero-->
    <property name="termtimeout" value="0s"/>   <!-- Default termination timeout property to zero-->

	<property name="maxspeechtimeout" value="0s"/>      <!--  maxspeechtimeout. This is the maximum time allowed for a speech -->
	<property name="completetimeout" value="500ms"/>    <!--  completetimeout. This is the length of silence after a recognized speech  -->
	<property name="incompletetimeout" value="0s"/>     <!--  incompletetimeout. This is the length of silence after an incompletely recognized speech -->
	<property name="confidencelevel" value="1"/>        <!--  confidencelevel. This is the speech recognition confidence level -->

    <var name="II_SB_promptList" expr="'P'+'confRequest'+'|P'+audioURL+'|P'+'acceptRequest'+'|'"/>  <!--  List of audio files / speech to play -->
    <var name="II_SB_PlyAudio_nextOpt" expr="'136-15'"/>  <!--  PlayAudio Next Option. Name of next file -->
	<var name="II_SB_fldLength" expr="1"/>     <!--  DTMF Length. Defines how many digits/characters are allowed for a particular DTMF input -->
	
	<!-- Voice properties -->
	<var name="II_SB_maxSpch" expr="'0s'"/>       <!--  maxspeechtimeout. This is the maximum time allowed for a speech -->
	<var name="II_SB_cmplTime" expr="'1s'"/>       <!--  completetimeout. This is the length of silence after a recognized speech  -->
	<var name="II_SB_incmplTime" expr="'0s'"/>   <!--  incompletetimeout. This is the length of silence after an incompletely recognized speech -->
	<var name="II_SB_cnfLevel" expr="'0.5'"/>       <!--  confidencelevel. This is the speech recognition confidence level -->

	<!-- DTMF properties -->
	<var name="II_SB_fldTimeout" expr="'4s'"/>         <!--  Timeout. Controls how long to wait before throwing a noinput event -->
	<var name="II_SB_dgtTimeOut" expr="'0s'"/>    <!--  DTMF Interdigit time out. Controls number of seconds between key presses at an input field -->
	<var name="II_SB_fldTermChar" expr="''"/>    <!--  DTMF Terminating Character. Identifies the terminating character of a DTMF input -->

    <!-- Prompt properties -->
    <var name="II_SB_cutIn" expr="'true'"/>      <!--  Cut In. true / false - Controls if prompts are interruptable with a key press -->
    
    <!-- Misc Properties -->
    <var name="II_SB_mode" expr="'dtmf'"/>   <!--  Input Mode. This allows the system to detect either dtmf, voice or both voic and dtmf -->

    <!-- Global variables -->
    <var name="II_SB_index" expr="0"/>          <!-- Index. Used as a counter when looping through a list of items -->
    <var name="II_SB_listCnt" expr="0"/>        <!-- List Counter. Another counter used to loop through items -->
    <var name="II_SB_item" expr="''"/>          <!-- Item. Stores the value of a prompt type -->
    <var name="II_SB_promptID" expr="''"/>      <!-- Prompt ID. Prompt to play -->
    <var name="II_SB_plyAudio" expr="''"/>      <!-- Play Audio. Flag to indicate if a prompt should be played -->
    <var name="II_SB_plySpch" expr="''"/>       <!-- Play Speech. Flag to indicate if prompt should be played as speech -->
    <var name="II_SB_SYS_PATH" expr="'/interact/apps/spotbuild/audio/system/'"/>    <!-- System Path. System audio lib directory -->
    <var name="II_SB_AUDIO_EXT" expr="'.00.'+II_SB_PRMT_CODE"/>        <!-- Audio Extension. Extension added to audio file name -->
    <var name="II_SB_whichPath" expr="II_SB_AUDIO_PATH"/>                           <!-- Default audio path for current project -->
    <var name="II_SB_gotoForm" expr="''"/>      <!-- Goto Form. Holds name of next form -->
    <var name="II_SB_activeList" expr="''"/>    <!-- Active List. Holds value of prompt currently being played -->
    <var name="II_SB_plyOrdinal" expr="'n'"/>   <!-- Play Ordinal. Flag to indicate if number value should be played as an ordinal -->
    <var name="II_SB_plyAs" expr="''"/>         <!-- Play As. Holds information on what prompt should be played as -->
    <var name="II_SB_userEntry" expr="''"/>     <!-- User Entry. Stores value received from user -->

    <form id="begin">
        <!-- Bargein property is defaulted to true. So first check if user set interrupt to false.
             If so, reset bargein to false. Otherwise go check the input mode -->
        <block>
    	    <log target="status">Invite</log>
            <log>INFO: Entered audio-input.vxml [136-13]</log>
            <log>INFO: Audio Interruptible [<value expr="II_SB_cutIn"/>]</log>
            <if cond="II_SB_cutIn == 'true'">
                <goto next="#chkMode"/>
            </if>
        </block>
    	<object name="interrupt" classid="com.iivip.setproperty">
            <param name="PropertyName" value="bargein"/>
            <param name="PropertyValue" expr="II_SB_cutIn"/>
            <param name="PropertyScope" value="Document"/>
        </object>
        <block>
            <goto next="#chkMode"/>
        </block>
    </form>

    <form id="chkMode">  <!-- Input mode is defaulted to dtmf. If user has set it voice, set up speech properties -->
        <block>
            <log>INFO: Entered chkMode</log>
            <log>INFO: Input Mode [<value expr="II_SB_mode"/>]</log>
            <if cond="inString('voice', II_SB_mode, ' ')">
                <goto next="#setVoice"/>
            <else/>
                <goto next="#getItem"/>
            </if>
        </block>
    </form>

    <form id="setVoice">
        <block>
            <log>INFO: Entered setVoice</log>
            <!-- Set speech related properties -->
        </block>
        <property name='com.iivip.voicechanneltype' value='echo'/>
    	<object name="inputMode" classid="com.iivip.setproperty">
            <param name="PropertyName" value="inputmodes"/>
            <param name="PropertyValue" expr="II_SB_mode"/>
            <param name="PropertyScope" value="Document"/>
        </object>
    	<object name="speech" classid="com.iivip.setproperty">
            <param name="PropertyName" value="maxspeechtimeout"/>
            <param name="PropertyValue" expr="II_SB_maxSpch"/>
            <param name="PropertyScope" value="Document"/>
        </object>
    	<object name="cmTime" classid="com.iivip.setproperty">
            <param name="PropertyName" value="completetimeout"/>
            <param name="PropertyValue" expr="II_SB_cmplTime"/>
            <param name="PropertyScope" value="Document"/>
        </object>
    	<object name="incmTime" classid="com.iivip.setproperty">
            <param name="PropertyName" value="incompletetimeout"/>
            <param name="PropertyValue" expr="II_SB_incmplTime"/>
            <param name="PropertyScope" value="Document"/>
        </object>
    	<object name="level" classid="com.iivip.setproperty">
            <param name="PropertyName" value="confidencelevel"/>
            <param name="PropertyValue" expr="II_SB_cnfLevel"/>
            <param name="PropertyScope" value="Document"/>
        </object>
        <block>
            <log>INFO: Maximum Speech Time [<value expr="II_SB_maxSpch"/>]</log>
            <log>INFO: Complete Timeout [<value expr="II_SB_cmplTime"/>]</log>
            <log>INFO: Incomplete Timeout [<value expr="II_SB_incmplTime"/>]</log>
            <log>INFO: Confidence Level [<value expr="II_SB_cnfLevel"/>]</log>
            <goto next="#getItem"/>
        </block>
    </form>

    <form id="getItem"> <!-- Audio is passed into template as a pipe delimited list of operators and values -->
        <block>
            <log>INFO: Entered getItem</log>
            <assign name="II_SB_plyAudio" expr="'y'"/>
            <assign name="II_SB_plySpch" expr="'n'"/>
            <assign name="II_SB_plyOrdinal" expr="'n'"/>
            <assign name="II_SB_plyAs" expr="''"/>
            <assign name="II_SB_item" expr="getNextElement(II_SB_index, II_SB_promptList, '|')"/>	<!-- Extract prompts from input list -->
            <assign name="II_SB_index" expr="II_SB_index + 1"/>
            <assign name="II_SB_gotoForm" expr="'#getItem'"/>
            <assign name="II_SB_listCnt" expr="0"/>
            <if cond="((II_SB_item != '-1') &amp;&amp; (II_SB_item != ''))">	<!-- Check that item is not an empty string and we have not reached the end of the list -->
                <assign name="II_SB_promptID" expr="iiSubstr(II_SB_item, 1 ,II_SB_item.length)"/> <!-- Seperate prompt from operator -->
                <log>INFO: Index [<value expr="II_SB_index"/>]</log>
                <log>INFO: Item [<value expr="II_SB_item"/>]</log>
                <if cond="(II_SB_item[0] == 'P') || (II_SB_item[0] == 'E')">    <!-- P. Indicates prompt type is audio file -->
                    <!-- Check if user has specified custom location or prompt group for audio file.
                         If so, use that location for file url and prompt group in file name -->
                    <if cond="inString('/',II_SB_promptID,'')">
                        <assign name="II_SB_whichPath" expr="''"/>
                    <else/>
                        <assign name="II_SB_whichPath" expr="II_SB_AUDIO_PATH"/>
                    </if>
                    <if cond="inString('.',II_SB_promptID,'')">
                        <assign name="II_SB_AUDIO_EXT" expr="''"/>
                    <else/>
                        <assign name="II_SB_AUDIO_EXT" expr="'.00.'+II_SB_PRMT_CODE"/>
                    </if>
                    <assign name="II_SB_promptID" expr="II_SB_whichPath+II_SB_promptID+II_SB_AUDIO_EXT"/>
                    <log>INFO: Attempting to play audio file [<value expr="II_SB_promptID"/>]</log>
                    <goto next="#getEntry"/>
                <elseif cond="II_SB_item[0] == 'D'"/>   <!-- D. Indicates prompt type is date -->
                    <if cond="chkExpr(II_SB_promptID, 'D')">    <!-- Verify that date expression has the right format -->
                        <assign name="II_SB_gotoForm" expr="'#playList'"/>
                        <assign name="II_SB_activeList" expr="dateToPrompt(II_SB_promptID)"/>   <!-- Turn expression into an array of prompts -->
                        <log>INFO: Attempting to play date [<value expr="II_SB_activeList"/>]</log>
                        <goto next="#playList"/>
                    <else/>
                        <log>ERROR: Invalid date format [<value expr="II_SB_promptID"/>]. Skipping this item...</log>
                    </if>
                <elseif cond="II_SB_item[0] == 'C'"/>   <!-- C. Indicates prompt type is currency -->
                    <if cond="chkExpr(II_SB_promptID, 'C')">    <!-- Verify that expression is valid -->
                        <assign name="II_SB_gotoForm" expr="'#playList'"/>
                        <assign name="II_SB_activeList" expr="currencyToPrompt(II_SB_promptID)"/>   <!-- Turn expression into an array of prompts -->
                        <log>INFO: Attempting to play currency [<value expr="II_SB_activeList"/>]</log>
                        <goto next="#playList"/>
                    <else/>
                        <log>ERROR: Invalid currency format [<value expr="II_SB_promptID"/>]. Skipping this item...</log>
                    </if>
                <elseif cond="II_SB_item[0] == 'N'"/>   <!-- N. Indicates prompt type is number -->
                    <if cond="inString('ord', II_SB_promptID,'_')"> <!-- Check if user wants to play as ordinal -->
                        <assign name="II_SB_plyOrdinal" expr="'y'"/>
                        <assign name="II_SB_promptID" expr="getNextElement(0,II_SB_promptID,'_ord')"/>
                    </if>
                    <if cond="chkExpr(II_SB_promptID, 'N')">    <!-- Verify that expression is valid -->
                        <assign name="II_SB_gotoForm" expr="'#playNumbers'"/>
                        <assign name="II_SB_activeList" expr="numberToPrompt(II_SB_promptID)"/> <!-- Turn expression into an array of prompts -->
                        <log>INFO: Attempting to play number [<value expr="II_SB_activeList"/>]</log>
                        <goto next="#playNumbers"/>
                    <else/>
                        <log>ERROR: Invalid number format [<value expr="II_SB_promptID"/>]. Skipping this item...</log>
                    </if>
                <elseif cond="II_SB_item[0] == 'V'"/>   <!-- V. Indicates prompt type is digit -->
                    <assign name="II_SB_gotoForm" expr="'#playDigits'"/>
                    <if cond="inString('ord', II_SB_promptID,'_')">   <!-- Check if digits are to be played as ordinals -->
                        <assign name="II_SB_plyOrdinal" expr="'y'"/>
                        <assign name="II_SB_activeList" expr="getNextElement(0,II_SB_promptID,'_ord')"/>
                    <else/>
                        <assign name="II_SB_activeList" expr="II_SB_promptID"/>
                    </if>
                    <log>INFO: Attempting to play digits [<value expr="II_SB_activeList"/>]</log>
                    <goto next="#playDigits"/>
                <elseif cond="II_SB_item[0] == 'S'"/>   <!-- S. Indicates prompt type is speech -->
                    <assign name="II_SB_plyAudio" expr="'n'"/>
                    <assign name="II_SB_plySpch" expr="'y'"/>
                    <if cond="inString('_',II_SB_promptID,'')">   <!-- Check for speech interpretation -->
                        <assign name="II_SB_plyAs" expr="getNextElement(1,II_SB_promptID,'_')"/>
                        <assign name="II_SB_promptID" expr="getNextElement(0,II_SB_promptID,'_')"/>
                        <if cond="((II_SB_plyAs == 'currency') || (II_SB_plyAs == 'number'))">  <!-- For currency and number, substitute '*' with '.' -->
                            <assign name="II_SB_promptID" expr="iiReplace(II_SB_promptID,'*','.')"/>
                        <elseif cond="II_SB_plyAs == 'phone'"/>
                            <assign name="II_SB_promptID" expr="iiReplace(II_SB_promptID,'*','x')"/>    <!-- For phone, substitute '*' with 'x' for extension -->
                        </if>
                    </if>
                    <log>INFO: Attempting to play speech [<value expr="II_SB_promptID"/>]</log>
                    <goto next="#getEntry"/>
                <elseif cond="II_SB_item[0] == 'T'"/>   <!-- T. Indicates prompt type is Time -->
                    <if cond="chkExpr(II_SB_promptID, 'T')">    <!-- Verify that expression is valid -->
                        <assign name="II_SB_gotoForm" expr="'#playList'"/>
                        <assign name="II_SB_activeList" expr="timeFormat(II_SB_promptID)"/> <!-- Turn expression into an array of prompts -->
                        <log>INFO: Attempting to play time [<value expr="II_SB_activeList"/>]</log>
                        <goto next="#playList"/>
                    <else/>
                        <log>ERROR: Invalid time format [<value expr="II_SB_promptID"/>]. Skipping this item...</log>
                    </if>
                <else/>
                    <log>ERROR: Invalid format. Skipping this item...</log>	<!-- Template somehow received an item with an invalid operator -->
                </if>
            <else/>
                <log>INFO: Played all audio types</log>
                <if cond="II_SB_fldTimeout != ''">	<!-- We've gone through the list of prompts, check if we need to wait for user input -->
                    <log>INFO: Waiting for input...</log>
                    <goto next="#setTimeout"/>
                <else/>
                    <goto next="#exit"/>
                </if>
            </if>
            <goto next="#getItem"/>
        </block>
    </form>

    <form id="playDigits">  <!-- Extract each digit in the active list and build a prompt to play -->
        <block>
            <log>INFO: Entered playDigits</log>
            <assign name="II_SB_promptID" expr="getNextElement(II_SB_listCnt, II_SB_activeList ,'')"/>
            <assign name="II_SB_listCnt" expr="II_SB_listCnt + 1"/>
            <if cond="II_SB_promptID != ''">    <!-- Verify that this value is not an empty string -->
                <if cond="II_SB_promptID != '-1'">  <!-- Verify that we are not at the end of the list of digits -->
                    <if cond="II_SB_plyOrdinal == 'n'"> <!-- Set up regular or ordinal prompt -->
                        <assign name="II_SB_promptID" expr="II_SB_SYS_PATH + II_SB_promptID + II_SB_AUDIO_EXT"/>
                    <else/>
                        <assign name="II_SB_promptID" expr="II_SB_SYS_PATH + 'ordinal_'+ II_SB_promptID + II_SB_AUDIO_EXT"/>
                    </if>
                    <goto next="#getEntry"/>    <!-- Go play audio file -->
                <else/>
                    <goto next="#getItem"/>     <!-- We've gone through the list of digits. Go check if there are any more items on the original prompt list -->
                </if>
            <else/>     <!-- Somehow, we pulled an empty string off the list. Check if there are any more digits -->
                <goto next="#playDigits"/>
            </if>
        </block>
    </form>

    <form id="playNumbers"> <!-- Extract each number in the active list and build a prompt to play -->
        <block>
            <log>INFO: Entered playNumbers</log>
            <assign name="II_SB_promptID" expr="getNextElement(II_SB_listCnt, II_SB_activeList ,'|')"/>
            <assign name="II_SB_listCnt" expr="II_SB_listCnt + 1"/>
            <if cond="II_SB_promptID != ''">    <!-- Verify that this value is not an empty string -->
                <if cond="II_SB_promptID != '-1'">  <!-- Verify that we are not at the end of the list of numbers -->
                    <!-- The logic below checks if we are on the last item of our list.
                         If so, we want to check if the user wants this number played as an ordinal.
                         If both these are true, we need to set up the right prompt -->
                    <if cond="((II_SB_listCnt+1) == (iiStrCnt(II_SB_activeList,'|')) &amp;&amp; (II_SB_plyOrdinal == 'y'))">
                        <assign name="II_SB_promptID" expr="II_SB_SYS_PATH + 'ordinal_'+ II_SB_promptID + II_SB_AUDIO_EXT"/>
                    <else/>
                        <assign name="II_SB_promptID" expr="II_SB_SYS_PATH + II_SB_promptID + II_SB_AUDIO_EXT"/>
                    </if>
                    <goto next="#getEntry"/>    <!-- Go play audio file -->
                <else/>
                    <goto next="#getItem"/>     <!-- We've gone through the list of numbers. Go check if there are any more items on the original prompt list -->
                </if>
            <else/>
                <goto next="#playNumbers"/>     <!-- Somehow, we pulled an empty string off the list. Check if there are any more numbers -->
            </if>
        </block>
    </form>

    <form id="playList">    <!-- Extract each value in the active list and build a prompt to play -->
        <block>
            <log>INFO: Entered playList</log>
            <assign name="II_SB_promptID" expr="getNextElement(II_SB_listCnt, II_SB_activeList ,'|')"/>
            <assign name="II_SB_listCnt" expr="II_SB_listCnt + 1"/>
            <if cond="II_SB_promptID != ''">    <!-- Verify that this value is not an empty string -->
                <if cond="II_SB_promptID != '-1'">  <!-- Verify that we are not at the end of the list -->
                    <assign name="II_SB_promptID" expr="II_SB_SYS_PATH + II_SB_promptID + II_SB_AUDIO_EXT"/>
                    <goto next="#getEntry"/>    <!-- Go play audio file -->
                <else/>
                    <goto next="#getItem"/>     <!-- We've gone through the list. Go check if there are any more items on the original prompt list -->
                </if>
            <else/>
                <goto next="#playList"/>     <!-- Somehow, we pulled an empty string off the list. Check if there are any more values on the list -->
            </if>
        </block>
    </form>

    <form id="setTimeout">  <!-- Update timeout property, and go wait for input -->
        <block>
            <log>INFO: Entered setTimeout</log>
        </block>
    	<object name="dgt" classid="com.iivip.setproperty">
            <param name="PropertyName" value="timeout"/>
            <param name="PropertyValue" expr="II_SB_fldTimeout"/>
            <param name="PropertyScope" value="Document"/>
        </object>
        <block>
            <assign name="II_SB_plyAudio" expr="'n'"/>
            <assign name="II_SB_plySpch" expr="'n'"/>
            <assign name="II_SB_gotoForm" expr="'#exit'"/>
            <goto next="#getEntry"/>
        </block>
    </form>

    <menu id="getEntry">
        <!-- This menu can play a specified audio prompt or speech. It can also collect a single key press
             or attempt to match a user defined grammar. If we need to collect multiple key presses,
             we'll just loop over our menu until we are stopped by a termination rule - time out, 
             term char or max keys allowed. -->
        <choice dtmf="0" next="#chkEntry"/>	<!-- A user key press will transfer control to the chkEntry form -->
        <choice dtmf="1" next="#chkEntry"/>
        <choice dtmf="2" next="#chkEntry"/>
        <choice dtmf="3" next="#chkEntry"/>
        <choice dtmf="4" next="#chkEntry"/>
        <choice dtmf="5" next="#chkEntry"/>
        <choice dtmf="6" next="#chkEntry"/>
        <choice dtmf="7" next="#chkEntry"/>
        <choice dtmf="8" next="#chkEntry"/>
        <choice dtmf="9" next="#chkEntry"/>
        <choice dtmf="*" next="#chkEntry"/>
        <choice dtmf="#" next="#chkEntry"/>
		<choice next="#getSpeech"> <!-- A user's speech will transfer control to the getSpeech form -->
            
		</choice>
        <noinput>	<!-- Did not get a key press before specified timeout -->
            <if cond="II_SB_gotoForm == ''">
                <goto next="#exit"/>
            <else/>
                <goto expr="II_SB_gotoForm"/>
            </if>
        </noinput>
        <nomatch>
            <if cond="inString('voice', II_SB_mode, ' ')">	<!-- If input mode is set up for voice, store interpretation -->
	    		<assign name="II_SB_userEntry" expr="application.lastresult$.interpretation"/>
            <else/>
                <!-- Something weird happened! Application received a key press it couldn't match -->
            </if>
            <goto next="#exit"/>
        </nomatch>
        <prompt cond="II_SB_plyAudio == 'y'"> <!-- Attempt to play specified audio file -->
			<audio expr="II_SB_promptID"/>
        </prompt>
        <prompt cond="((II_SB_plySpch == 'y') &amp;&amp; (II_SB_plyAs == ''))">
            <value expr="II_SB_promptID"/>
        </prompt>
        <prompt cond="((II_SB_plySpch == 'y') &amp;&amp; (II_SB_plyAs == 'boolean'))">
            <say-as interpret-as="vxml:boolean">
                <value expr="II_SB_promptID"/>
            </say-as>
        </prompt>
        <prompt cond="((II_SB_plySpch == 'y') &amp;&amp; (II_SB_plyAs == 'date'))">
            <say-as interpret-as="vxml:date">
                <value expr="II_SB_promptID"/>
            </say-as>
        </prompt>
        <prompt cond="((II_SB_plySpch == 'y') &amp;&amp; (II_SB_plyAs == 'digits'))">
            <say-as interpret-as="vxml:digits">
                <value expr="II_SB_promptID"/>
            </say-as>
        </prompt>
        <prompt cond="((II_SB_plySpch == 'y') &amp;&amp; (II_SB_plyAs == 'currency'))">
            <say-as interpret-as="vxml:currency">
                <value expr="II_SB_promptID"/>
            </say-as>
        </prompt>
        <prompt cond="((II_SB_plySpch == 'y') &amp;&amp; (II_SB_plyAs == 'number'))">
            <say-as interpret-as="vxml:number">
                <value expr="II_SB_promptID"/>
            </say-as>
        </prompt>
        <prompt cond="((II_SB_plySpch == 'y') &amp;&amp; (II_SB_plyAs == 'phone'))">
            <say-as interpret-as="vxml:phone">
                <value expr="II_SB_promptID"/>
            </say-as>
        </prompt>
        <prompt cond="((II_SB_plySpch == 'y') &amp;&amp; (II_SB_plyAs == 'time'))">
            <say-as interpret-as="vxml:time">
                <value expr="II_SB_promptID"/>
            </say-as>
        </prompt>
    </menu>

	<form id="getSpeech">   <!-- Store interpretation of user utterance -->
		<block>
			<assign name="II_SB_userEntry" expr="application.lastresult$.interpretation"/>
			<goto next="#exit"/>
		</block>
	</form>

    <form id="chkEntry">
        <!-- First thing we do in chkEntry is to prepare for the next key press.
             We update the value of the timeout property with the value 
             of the digit time out variable. Our purpose is to give the user the
             same amount of time between each key press -->
		<object name="dgt" classid="com.iivip.setproperty">
            <param name="PropertyName" value="timeout"/>
            <param name="PropertyValue" expr="II_SB_dgtTimeOut"/>
            <param name="PropertyScope" value="Document"/>
        </object>
        <block>
            <!-- Verify that the user did not press the terminating character
                 and we've not collected the max number of key presses -->
            <if cond="((II_SB_fldLength == '') || (II_SB_fldLength == 0))"> <!-- Appears user made the prompt interruptible but doesn't want to save the key press -->
                <log>INFO: Ignoring user key press [<value expr="application.lastresult$.utterance"/>]</log>
                <log>INFO: DTMF Length set to [<value expr="II_SB_fldLength"/>]</log>
            <else/>
                <if cond="application.lastresult$.utterance != II_SB_fldTermChar">
                    <assign name="II_SB_userEntry" expr="II_SB_userEntry + application.lastresult$.utterance"/> <!-- Store the user's key press -->
                    <if cond="II_SB_userEntry.length != II_SB_fldLength">   <!-- If we've not collected the max allowed, go get next one -->
                        <assign name="II_SB_plyAudio" expr="'n'"/>
                        <assign name="II_SB_plySpch" expr="'n'"/>
                        <assign name="II_SB_gotoForm" expr="''"/>
                        <goto next="#getEntry"/>
                    <else/>
                        <log>INFO: Received maximum key presses allowed [<value expr="II_SB_fldLength"/>]</log>
                    </if>
                <else/>
                    <log>INFO: Received term key [<value expr="II_SB_fldTermChar"/>]</log>
                </if>
            </if>
            <goto next="#exit"/> <!-- We have max allowed input or user pressed term key -->    
        </block>
    </form>

    <form id="exit">
        <block>
            <if cond="II_SB_userEntry != ''">
        		<log>INFO: Input received [<value expr="II_SB_userEntry"/>]</log>
        		<log>INFO: Last Entry current value [<value expr="II_SB_lastEntry"/>]</log>
                <assign name="II_SB_lastEntry" expr="II_SB_userEntry"/>
        		<log>INFO: Updated Last Entry to [<value expr="II_SB_lastEntry"/>]</log>
            <else/>
        		<log>INFO: Did not receive any input from user</log>
            </if>
			<assign name="getInput" expr="II_SB_userEntry" />
			<if cond="II_SB_PlyAudio_nextOpt != ''">
                <log>INFO: Next option [<value expr="II_SB_PlyAudio_nextOpt"/>.vxml]</log>
				<goto expr="'file:' + II_SB_APP_PATH + II_SB_PlyAudio_nextOpt + '.vxml'"/>
			<else/>	<!-- Exit to ccxml layer -->				
				<assign name="II_SB_status" expr="'endCall'"/>
				<log>INFO: Next Node not set. Exit to CCXML.</log>
				<log>INFO: Return status [<value expr="II_SB_status"/>]</log>
				<exit namelist="II_SB_status"/>
			</if>
        </block>
    </form>

    <catch event="error.noresource">
        <log>ERROR: No resource to play [<value expr="II_SB_promptID"/>]</log>
        <goto next="#exit"/>
    </catch>
</vxml>
