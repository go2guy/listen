<?xml version="1.0" ?>
<ccxml version="1.0">

    <!-- Last Modified 06/14/2010
       *   @Name   SPOTbuild.ccxml
       *   @desc   Default entry point for all SPOTbuild projects -->

    <script src="file:/interact/apps/spotbuild/lib/js/lib.js"></script>         <!-- Location of java script file -->

    <!-- Application constants. These are used to control the flow of the application -->
    <var name="II_SB_PROJECT_NAME" expr="'listen_mailbox'"/>         <!-- Config: PROJECT_NAME. Project directory -->
    <var name="II_SB_BASE_DIR" expr="'/interact/apps/spotbuild/'"/>   <!-- BASE_DIR. Base directory -->
    <var name="II_SB_CODE_DIR" expr="II_SB_BASE_DIR + II_SB_PROJECT_NAME + '/'"/> <!-- CODE_DIR. Application directory under base directory. Contains all code -->
    <var name="II_SB_VXML_LIB" expr="'/interact/apps/spotbuild/lib/vxml/'"/>     <!-- VXML LIB DIR. VXML library directory path -->
    <var name="II_SB_projectSource" expr="'SPOTbuild'"/>

    <!-- Global variables -->
    <var name="II_SB_state" expr="'idle'"/>               <!-- state. This variable holds the CCXML dialog state -->
    <var name="II_SB_local" expr="''"/>        <!-- II_SB_local. Contains dialed phone number -->
    <var name="II_SB_originator" expr="''"/>   <!-- II_SB_connectio.originator. Contains information on call originator -->
    <var name="II_SB_remote" expr="''"/>       <!-- II_SB_remote. Contains origination information -->
    <var name="II_SB_protocol" expr="''"/>     <!-- II_SB_protocol. Contains the protocol used for the call -->
    <var name="II_SB_connectionID" expr="''"/>    <!-- II_SB_connectionID. Contains the ID of the connection for this call -->
    <var name="II_SB_type" expr="''"/>            <!-- II_SB_type. Contains the type of call - VOIP, PSTN -->
    <var name="II_SB_sessionID" expr="''"/>       <!-- II_SB_sessionID. Contains the ID of the ccxml session -->
    <var name="II_SB_obcallid" expr="''"/>
    <var name="II_SB_importedValue" expr="''"/>

	<!-- Disconnect variables -->
	<var name="II_SB_disconnect.id" expr="''"/>			<!-- Contains the connection id of party that triggered connection.disconnected event -->
	<var name="II_SB_disconnect.reason" expr="''"/>		<!-- Contains platform specific reason for disconnect -->
	<var name="II_SB_disconnect.originator" expr="''"/>	<!-- Identifies party that triggered connection.disconnected event -->


    <!-- Begin executable code -->
    <eventprocessor statevariable="II_SB_state">

        <!-- Received ccxml.loaded -->
        <transition state="idle" event="ccxml.loaded" name="loadEV">
            <log>INFO: Entered listen_mailbox.ccxml [56-2]</log>
            <log>INFO: transition event [<value expr="loadEV.name"/>] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_sessionID" expr="loadEv.sessionid"/>
        </transition>

        <transition event="CCXML_CREATEHTTP_MSG" name="httpEv">
            <!-- Received CCXML_CREATEHTTP_MSG -->
            <log>INFO: transition event [CCXML_CREATEHTTP_MSG] state [<value expr="II_SB_state"/>]</log>
            <accept/>
            <assign name="II_SB_state" expr="'alerted'"/>
            <assign name="II_SB_local" expr="''"/>
            <assign name="II_SB_remote" expr="''"/>
            <assign name="II_SB_protocol" expr="''"/>
            <assign name="II_SB_originator" expr="''"/>
            <assign name="II_SB_connectionID" expr="''"/>
            <assign name="II_SB_importedValue" expr="httpEv.II_SB_importedValue"/>
            <fetch next="'file:' + II_SB_CODE_DIR + 'begin.ccxml'" namelist="II_SB_local II_SB_remote II_SB_originator II_SB_protocol II_SB_connectionID II_SB_type II_SB_VXML_LIB II_SB_projectSource II_SB_obcallid II_SB_importedValue"/> <!-- Fetch ccxml document -->
        </transition>

        <!-- Received VRU_AUTOSTART -->
        <transition state="idle" event="VRU_AUTOSTART" name="alertEV">
            <log>INFO: Received VRU_AUTOSTART event</log>
            <assign name="II_SB_state" expr="'alerted'"/>
            <assign name="II_SB_local" expr="''"/>
            <assign name="II_SB_remote" expr="''"/>
            <assign name="II_SB_protocol" expr="''"/>
            <assign name="II_SB_originator" expr="''"/>
            <assign name="II_SB_connectionID" expr="''"/>
            <assign name="II_SB_type" expr="alertEV.info.type"/>
            <assign name="II_SB_importedValue" expr="alertEV.importedValue"/>
            <accept/>
            <fetch next="'file:' + II_SB_CODE_DIR + 'begin.ccxml'" namelist="II_SB_status II_SB_local II_SB_remote II_SB_originator II_SB_protocol II_SB_connectionID II_SB_type II_SB_VXML_LIB II_SB_projectSource II_SB_obcallid II_SB_importedValue"/> <!-- Fetch ccxml document -->
        </transition>

        <!-- Received connection.alerting -->
        <transition state="idle" event="connection.alerting" name="alertEV">
            <log>INFO: transition event [<value expr="alertEV.name"/>] state [<value expr="II_SB_state"/>]</log>
            <log target="appdef"> <value expr="getDisplayName(alertEV.connection.remote)"/> </log>
            <assign name="II_SB_state" expr="'alerted'"/>
            <assign name="II_SB_local" expr="alertEV.connection.local"/>
            <assign name="II_SB_remote" expr="alertEV.connection.remote"/>
            <assign name="II_SB_protocol" expr="alertEV.connection.protocol"/>
            <assign name="II_SB_originator" expr="alertEV.connection.originator"/>
            <assign name="II_SB_connectionID" expr="alertEV.connectionid"/>
            <assign name="II_SB_type" expr="alertEV.info.type"/>
            <fetch next="'file:' + II_SB_CODE_DIR + 'begin.ccxml'" namelist="II_SB_status II_SB_local II_SB_remote II_SB_originator II_SB_protocol II_SB_connectionID II_SB_type II_SB_VXML_LIB II_SB_projectSource II_SB_obcallid"/> <!-- Fetch ccxml document -->
        </transition>

        <!-- Fetched ccxml document -->
        <transition event="fetch.done" name="evt">
            <log>INFO: transition event [fetch.done] state [<value expr="II_SB_state"/>]</log>
            <goto fetchid="evt.fetchid"/> <!-- Go to ccxml document -->
        </transition>

        <!-- Catch fetch error -->
        <transition event="error.fetch" name="evt">
            <log>INFO: transition event [<value expr="evt.name"/>] state [<value expr="II_SB_state"/>]</log>
            <log>ERROR: Unable to fetch document. REASON [<value expr="evt.reason"/>]</log>            
            <assign name="II_SB_state" expr="'endCall'"/>
            <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
        </transition>

        <!-- Catch errors -->
        <transition event="error.dialog.semantic" name="evt">
            <log>INFO: transition event [error.dialog.semantic] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_state" expr="'endCall'"/>
            <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
        </transition>

        <transition event="err*" name="errEV">
            <log>INFO: transition event [err*] state [<value expr="II_SB_state"/>]</log>
            <log>ERROR: [<value expr="errEV.reason"/>]</log>
            <assign name="II_SB_state" expr="'endCall'"/>
            <exit/>
        </transition>

	    <transition event="conection.disconnected" name="evt">
            <log>INFO: transition event [conection.disconnected] state [<value expr="II_SB_state"/>]</log>
			<assign name="II_SB_disconnect.id" expr="evt.connectionid"/>
			<assign name="II_SB_disconnect.reason" expr="evt.reason"/>
			<assign name="II_SB_disconnect.originator" expr="evt.connection.originator"/>
	        <send data="'dialog.user.hangup'" target="II_SB_sessionID"/>
	    </transition>

        <transition event="dialog.user.hangup">
            <log>INFO: transition event [dialog.user.hangup] state [<value expr="II_SB_state"/>]</log>
            <var name="II_SB_file1" expr="II_SB_CODE_DIR + 'hang-up.vxml'"/>
            <var name="II_SB_file2" expr="''"/>
            <var name="II_SB_fileOprtn" expr="'stat'"/>
			<assign name="II_SB_state" expr="'hangUp'"/>
            <dialogstart src="'file:' + II_SB_BASE_DIR + 'lib/vxml/fileUtil.vxml'" namelist="II_SB_file1 II_SB_file2 II_SB_fileOprtn"/> <!-- Check for Hangup logic -->
        </transition>

        <!-- Return from vxml dialog -->
        <transition state="hangUp" event="dialog.exit" name="evt">
            <log>INFO: transition event [dialog.exit] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_state" expr="'endCall'"/>
            <if cond="evt.values.status != 'Failure'">
                <if cond="evt.values.II_SB_fileSize != ''">
                    <log>INFO: Found hang up node</log>
                    <dialogstart src="'file:' + II_SB_CODE_DIR + 'hang-up.vxml'" namelist="II_SB_disconnect.id II_SB_disconnect.reason II_SB_disconnect.originator"/>
                <else/>
                    <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
                </if>
            <else/>
                <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
            </if>
        </transition>

        <!-- Return from vxml dialog -->
        <transition event="dialog.exit" name="evt">
            <log>INFO: transition event [dialog.exit] state [<value expr="II_SB_state"/>]</log>
            <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
        </transition>

        <!-- Exit ccxml layer -->
        <transition event="dialog.user.endCall">
            <log>INFO: transition event [dialog.user.endCall] state [<value expr="II_SB_state"/>]</log>
            <exit/>
        </transition>

    </eventprocessor>
</ccxml>

