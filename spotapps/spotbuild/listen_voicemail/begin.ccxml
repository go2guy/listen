<?xml version="1.0" ?>
<ccxml version="1.0">
    <!-- Last Modified 02/17/2010 
       *   @Name   begin.ccxml
       *   @Desc   Starts a ccxml dialog and calls main.vxml -->

    <!-- Application constants. These are used to control the flow of the application -->
    <var name="II_SB_PROJECT_NAME" expr="'listen_voicemail'"/> <!--  PROJECT_NAME. Project directory -->
    <var name="II_SB_NEXT_OPTION" expr="'52-3'"/>   <!--  NEXT_OPTION. Contains the vxml file name to start -->
    <var name="II_SB_MAIN_VXML" expr="'main.vxml'"/>    <!-- MAIN_VXML. Contains the file name of the document to start once ccxml is loaded -->
    <var name="II_SB_BASE_DIR" expr="'/interact/apps/spotbuild/'"/>                 <!-- BASE_DIR. Base directory -->
    <var name="II_SB_CODE_DIR" expr="II_SB_BASE_DIR + II_SB_PROJECT_NAME + '/'"/>   <!-- CODE_DIR. Application directory under base directory. Contains all code -->

    <script src="file:/interact/apps/spotbuild/lib/js/lib.js"></script>     <!-- Location of java script file -->

    <!-- Passed in from another ccxml -->
    <var name="II_SB_VXML_LIB"/>
    <var name="II_SB_local"/>      <!-- Dialed ID -->
    <var name="II_SB_remote"/>     <!-- Origination ID -->
    <var name="II_SB_protocol"/>   <!-- Call protocol -->
    <var name="II_SB_originator"/> <!-- Call originator -->
    <var name="II_SB_connectionID"/>          <!-- II_SB_connectionID. Contains the ID of the connection for this call -->
    <var name="II_SB_type"/>                  <!-- II_SB_type.Contains the type of call - VOIP, PSTN -->
    <var name="II_SB_line"/>                  <!-- Line number processing call -->
    <var name="II_SB_projectSource"/>
	<var name="SB_UV_subscriberID"/>
	<var name="SB_UV_caller"/>
	<var name="SB_UV_msgState"/>


    <!-- Global variables -->
    <var name="II_SB_state" expr="'idle'"/>     <!-- state. This variable holds the CCXML dialog state -->
    <var name="II_SB_transfer"/>                <!-- transfer. Determins if this call is a transfer from another program -->
    <var name="II_SB_status"/>                  <!-- status. This variable is used for application control -->
    <var name="II_SB_dialogID" expr="''"/>      <!-- dialogID. Contains the ID for the last vxml dialog that was started -->
    <var name="II_SB_sessionID" expr="''"/>     <!-- sessionID. Contains the ID of the current ccxml session -->
    <var name="II_SB_ibcallid"/>                <!-- ibcallid. In bound connection id -->
    <var name="II_SB_obcallid"/>                <!-- obcallid. Out bound connection id -->
    <var name="II_SB_splitNextOpt"/>            <!-- spitNextOpt. Contains name of next vxml. Gets its value from the branch-call file -->
    <var name="II_SB_indialog" expr="'false'"/> <!-- Indicates when application is in vxml dialog -->

	<!-- Disconnect variables -->
	<var name="II_SB_discID" expr="''"/>			<!-- Contains the connection id of party that triggered connection.disconnected event -->
	<var name="II_SB_discReason" expr="''"/>		<!-- Contains platform specific reason for disconnect -->
	<var name="II_SB_discOriginator" expr="''"/>	<!-- Identifies party that triggered connection.disconnected event -->

    <!-- Begin executable code -->
    <eventprocessor statevariable="II_SB_state">

        <transition state="idle" event="ccxml.loaded" name="loadEv">
            <!-- This transition contains the first event encountered when this file is loaded.
                 In here we check the values of the transfer and status variables to determine the
                 next action. If both variables are undefined, we need to start main.vxml -->
            <log>INFO: Entered begin.ccxml [52-2]</log>
    	    <log target="status"><value expr="II_SB_PROJECT_NAME"/></log>
            <log>INFO: transition event [<value expr="loadEv.name"/>] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_sessionID" expr="loadEv.sessionid"/>
            <assign name="II_SB_line" expr="getNextElement(0,II_SB_sessionID,'.')"/>
            <log>INFO: II_SB_obcallid [<value expr="II_SB_obcallid"/>]</log>
            <log>INFO: II_SB_status [<value expr="II_SB_status"/>]</log>
            <log>INFO: II_SB_local [<value expr="II_SB_local"/>]</log>
            <log>INFO: II_SB_remote [<value expr="II_SB_remote"/>]</log>
            <log>INFO: II_SB_originator [<value expr="II_SB_originator"/>]</log>
            <log>INFO: II_SB_protocol [<value expr="II_SB_protocol"/>]</log>
            <log>INFO: II_SB_connectionID [<value expr="II_SB_connectionID"/>]</log>
            <log>INFO: II_SB_type [<value expr="II_SB_type"/>]</log>
            <log>INFO: II_SB_line [<value expr="II_SB_line"/>]</log>
        	<log>INFO: sessionID [<value expr="II_SB_sessionID"/>]</log>
            <assign name="II_SB_state" expr="'alerted'"/>
            <if cond="((II_SB_transfer == undefined) &amp;&amp; (II_SB_status == undefined))">
                <assign name="II_SB_ibcallid" expr="II_SB_connectionID"/>
                <dialogstart src="'file:' + II_SB_CODE_DIR + II_SB_MAIN_VXML" namelist="II_SB_local II_SB_remote II_SB_originator II_SB_protocol II_SB_connectionID II_SB_type II_SB_line II_SB_sessionID II_SB_CODE_DIR II_SB_NEXT_OPTION II_SB_transfer II_SB_projectSource SB_UV_subscriberID SB_UV_caller SB_UV_msgState"/> <!-- Start vxml dialog -->
            <else/>
                <log>INFO: Transfer [<value expr="II_SB_transfer"/>]</log>
                <if cond="II_SB_transfer == 'yes'">
        		    <log>INFO: Inbound connection id [<value expr="II_SB_ibcallid"/>]</log>
                    <send data="'dialog.user.alerting'" target="II_SB_sessionID"/>
                <elseif cond="II_SB_status == 'branchCall'"/>
                    <log>INFO: Going to [<value expr="II_SB_splitNextOpt"/>.vxml]</log>
                    <assign name="II_SB_NEXT_OPTION" expr="II_SB_splitNextOpt"/>
                    <assign name="II_SB_ibcallid" expr="II_SB_obcallid"/>
                    <assign name="II_SB_connectionID" expr="II_SB_obcallid"/>
                    <assign name="II_SB_obcallid" expr="''"/>
                    <send data="'dialog.user.alerting'" target="II_SB_sessionID"/>
                <else/>
                    <log>ERROR: Invalid state for begin.ccxml</log>
                    <assign name="II_SB_state" expr="'endCall'"/>
                    <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
                </if>
            </if>
        </transition>

        <transition event="dialog.user.alerting" name="alertEV">
            <!-- Here we join the inbound caller to the vxml channel for audio access -->
            <log>INFO: transition event [<value expr="dialog.user.alerting"/>] state [<value expr="II_SB_state"/>]</log>
            <join id1="II_SB_ibcallid" id2="'VXML_CHANNEL'"/> <!-- <join> throw a conference.joined event -->
		</transition>

		<transition state="alerted" event="conference.joined" name="evt">
            <log>INFO: transition event [conference.joined] state [<value expr="II_SB_state"/>]</log>
			<log>INFO: Joined caller to voice channel</log>
            <dialogstart src="'file:' + II_SB_CODE_DIR + II_SB_MAIN_VXML" namelist="II_SB_local II_SB_remote II_SB_originator II_SB_protocol II_SB_connectionID II_SB_type II_SB_line II_SB_sessionID II_SB_CODE_DIR II_SB_NEXT_OPTION II_SB_transfer II_SB_projectSource SB_UV_subscriberID SB_UV_caller SB_UV_msgState"/> <!-- Start vxml dialog -->
        </transition>

        <transition event="dialog.started" name="evt"> <!-- Started VXML dialog -->
            <log>INFO: transition event [dialog.started] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_dialogID" expr="evt.dialogid"/>
            <assign name="II_SB_indialog" expr="'true'"/>
        </transition>

        <transition event="fetch.done" name="evt"> <!-- Fetched ccxml document -->
            <log>INFO: transition event [fetch.done] state [<value expr="II_SB_state"/>]</log>
            <goto fetchid="evt.fetchid"/> <!-- Go to ccxml document -->
        </transition>

        <transition state="alerted endCall" event="dialog.exit" name="evt">
            <!-- Handles return from vxml dialog. This transition is used when we need to 
                 end the call, transfer control to a new application or start a different
                 ccxml file. -->
            <log>INFO: transition event [dialog.exit] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_status" expr="evt.values.II_SB_status"/>
            <assign name="II_SB_indialog" expr="'false'"/>
            <assign name="II_SB_NEXT_OPTION" expr="evt.values.II_SB_nextOpt"/>
            <if cond="(II_SB_status == 'endCall') || (II_SB_status == 'hangup') || (II_SB_state == 'endCall')">
                <log>INFO: End call</log>
                <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
            <elseif cond="II_SB_status == 'outDialCheck'"/>
                <log>INFO: Checking Out Dial status</log>
                <var name="II_SB_fromCCXML" expr="'true'"/>
                <dialogstart src="'file:' + II_SB_CODE_DIR + II_SB_NEXT_OPTION + '.vxml'" namelist="II_SB_obcallid II_SB_fromCCXML"/>
			<elseif cond="II_SB_status == 'transfer'"/>
                <log>INFO: Transfering to a new program</log>
                <var name="II_SB_transfer" expr="'yes'"/>
                <assign name="II_SB_projectSource" expr="'listen_voicemail'"/>
                <fetch next="'file:' + II_SB_BASE_DIR + II_SB_NEXT_OPTION + '/begin.ccxml'" namelist="II_SB_local II_SB_remote II_SB_originator II_SB_protocol II_SB_connectionID II_SB_type II_SB_CODE_DIR II_SB_NEXT_OPTION II_SB_transfer II_SB_ibcallid II_SB_projectSource II_SB_obcallid"/>
            <else/>
                <log>INFO: Inbound call action is set to [<value expr="II_SB_status"/>]</log>
                <assign name="II_SB_state" expr="'inboundAction'"/>
		        <var name="II_SB_passValues" expr="evt.values.II_SB_returnValues"/>
                <fetch next="'file:' + II_SB_CODE_DIR + II_SB_NEXT_OPTION + '.ccxml'" namelist="II_SB_status II_SB_passValues II_SB_local II_SB_remote II_SB_originator II_SB_protocol II_SB_type II_SB_connectionID II_SB_BASE_DIR II_SB_VXML_LIB II_SB_CODE_DIR II_SB_NEXT_OPTION II_SB_transfer II_SB_ibcallid II_SB_projectSource II_SB_obcallid"/> <!-- Fetch ccxml document -->
            </if>
        </transition>

        <transition event="dialog.user.customEvent" name="evt">
            <!-- This transition handles events thrown from the send-custom-event.ccxml file.
                 We essentially grab the event name and arguments and call the customEvent.vxml file -->
            <log>INFO: transition event [dialog.user.customEvent] state [<value expr="II_SB_state"/>]</log>
            <log>INFO: Received custom event [<value expr="evt.II_SB_eventToPass"/>]</log>
            <assign name="II_SB_state" expr="'customEvent'"/>
            <assign name="II_SB_passValues" expr="evt.II_SB_eventToPass + '|' + evt.II_SB_valueToPass"/>
            <if cond="II_SB_indialog == 'true'">
                <send data="'dialog.user.termDialog'" target="II_SB_sessionID"/>
            <else/>
              	<assign name="II_SB_state" expr="'alerted'"/>
	        	<dialogstart src="'file:' + II_SB_CODE_DIR + 'customEvent.vxml'" namelist="II_SB_ibcallid II_SB_passValues"/>
            </if>
        </transition>

        <transition state="customEvent" event="dialog.exit">
            <!-- Handles the return from the vxml dialog when a custom event is received -->
            <log>INFO: transition event [dialog.exit] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_indialog" expr="'false'"/>
          	<assign name="II_SB_state" expr="'alerted'"/>
	    	<dialogstart src="'file:' + II_SB_CODE_DIR + 'customEvent.vxml'" namelist="II_SB_ibcallid II_SB_passValues"/>
        </transition>

	    <transition event="dialog.user.termDialog"> <!-- Terminates the currently running dialog. -->
            <log>INFO: transition event [dialog.user.termDialog] state [<value expr="II_SB_state"/>]</log>
            <log>INFO: Terminating dialog [ <value expr="II_SB_dialogID" /> ]</log>
            <dialogterminate dialogid="II_SB_dialogID"/>
        </transition>

        <transition event="error.dialog.notstarted" name="evt"> <!-- Catch dialog not started -->
            <log>INFO: transition event [<value expr="evt.name"/>] state [<value expr="II_SB_state"/>]</log>
            <log>ERROR: Unable to start Dialog. REASON [<value expr="evt.reason"/>]</log>
            <assign name="II_SB_state" expr="'endCall'"/>
            <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
        </transition>

        <transition event="error.fetch" name="evt"> <!-- Catch fetch error -->
            <log>INFO: transition event [<value expr="evt.name"/>] state [<value expr="II_SB_state"/>]</log>
            <log>ERROR: Unable to fetch document. REASON [<value expr="evt.reason"/>]</log>            
            <assign name="II_SB_state" expr="'endCall'"/>
            <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
        </transition>

        <!-- Catch errors -->
        <transition event="err*" name="errEV">
            <log>INFO: transition event [err*] state [<value expr="II_SB_state"/>]</log>
            <log>ERROR: [<value expr="errEV.reason"/>]</log>
            <assign name="II_SB_state" expr="'endCall'"/>
            <exit/>
        </transition>

        <!-- Catch for the disconnect of the obcallid -->
        <transition event="connection.disconnected" name="evt" cond="evt.connectionid == II_SB_obcallid">
            <log>INFO: caught the connection.disconnected from the hangup from connectionid - <value expr="II_SB_obcallid"/></log>
            <assign name="II_SB_obcallid" expr="''"/>
        </transition>

		<transition event="connection.disconnected" name="evt" cond="evt.connectionid == II_SB_connectionID">
			<log>INFO: transition event [connection.disconnected] state [<value expr="II_SB_state"/>]</log>
            <var name="II_SB_file1" expr="II_SB_CODE_DIR + 'hang-up.vxml'"/>
            <var name="II_SB_file2" expr="''"/>
            <var name="II_SB_fileOprtn" expr="'stat'"/>
			<assign name="II_SB_discID" expr="evt.connectionid"/>
			<assign name="II_SB_discReason" expr="evt.reason"/>
			<assign name="II_SB_discOriginator" expr="evt.connection.originator"/>
			<assign name="II_SB_state" expr="'hangUp'"/>
            <dialogstart src="'file:' + II_SB_BASE_DIR + 'lib/vxml/fileUtil.vxml'" namelist="II_SB_file1 II_SB_file2 II_SB_fileOprtn"/> <!-- Check for Hangup logic -->
		</transition>

        <!-- Return from vxml dialog -->
        <transition state="hangUp" event="dialog.exit" name="evt">
            <log>INFO: transition event [dialog.exit] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_state" expr="'endCall'"/>
            <assign name="II_SB_indialog" expr="'false'"/>
            <if cond="evt.values.II_SB_status != 'Failure'">
                <if cond="evt.values.II_SB_fileSize != ''">
                    <log>INFO: Found hang up node</log>
                    <dialogstart src="'file:' + II_SB_CODE_DIR + 'hang-up.vxml'" namelist="II_SB_discID II_SB_discReason II_SB_discOriginator"/>
                <else/>
                    <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
                </if>
            <else/>
                <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
            </if>
        </transition>

        <!-- Exit ccxml layer -->
        <transition event="dialog.user.endCall">
            <log>INFO: transition event [dialog.user.endCall] state [<value expr="II_SB_state"/>]</log>
            <exit/>
        </transition>

    </eventprocessor>
</ccxml>
