<?xml version="1.0" ?>
<ccxml version="1.0">

    <!-- Last Modified 07/22/2010
       *   @Name   create-session.ccxml
       *   @Desc   Creates a ccxml session -->

    <!-- These variables are passed in from the ccxml layer -->
    <var name="II_SB_status"/>
    <var name="II_SB_NEXT_OPTION"/>
    <var name="II_SB_remote"/>
    <var name="II_SB_local"/>
    <var name="II_SB_originator"/>
    <var name="II_SB_protocol"/>
    <var name="II_SB_connectionID"/>
    <var name="II_SB_type"/>
    <var name="II_SB_CODE_DIR"/>
    <var name="II_SB_BASE_DIR"/>
    <var name="II_SB_ibcallid"/>
    <var name="II_SB_obcallid"/>
    <var name="II_SB_confid"/>
    <var name="II_SB_passValues"/>
    <var name="II_SB_VXML_LIB"/>
    <var name="II_SB_projectSource"/>

    <!-- Global variables -->
    <var name="II_SB_state" expr="'idle'"/>   <!-- state. This variable holds the CCXML dialog state -->    
    <var name="II_SB_dialogid" expr="''"/>    <!-- dialogid. Contains the ID for the last vxml dialog that was started -->
    <var name="II_SB_sessionID" expr="''"/>   <!-- sessionID. Contains the ID of the current ccxml session -->
    <var name="II_SB_newSID" expr="'-1'"/>    <!-- New SID. Contains the ID of the created ccxml session -->
    <var name="II_SB_indialog" expr="'false'"/> <!-- indialog. Identifies if application is currently running a vxml dialog -->
    <var name="II_SB_whichOpt" expr="''"/>      <!-- Which Option. Determines next option for applicaiton -->
    <var name="II_SB_newNxtOpt" expr="''"/>     <!-- New Session Next Option -->
    <var name="II_SB_oldNxtOpt" expr="''"/>     <!-- Old Session Next Option -->
    <var name="II_SB_errCreateOpt" expr="''"/>  <!-- Next option if a create attempt fails -->
    <var name="II_SB_errMoveOpt" expr="''"/>    <!-- Next option if a move attempt fails -->
    <var name="II_SB_whichID" expr="''"/>       <!-- Identifies connection to move / join to voice channel -->

	<!-- Disconnect variables -->
	<var name="II_SB_discID" expr="''"/>			<!-- Contains the connection id of party that triggered connection.disconnected event -->
	<var name="II_SB_discReason" expr="''"/>		<!-- Contains platform specific reason for disconnect -->
	<var name="II_SB_discOriginator" expr="''"/>	<!-- Identifies party that triggered connection.disconnected event -->

    <!-- load javascript library -->
    <script src="file:/interact/apps/spotbuild/lib/js/lib.js"></script>
    <script src="file:/interact/apps/spotbuild/lib/js/stringify.js"></script>

    <!-- Begin executable code -->
    <eventprocessor statevariable="II_SB_state">

	    <transition state="idle" event="ccxml.loaded" name="evt">  <!-- Load CCXML file. Log status and update state -->
            <log>INFO: Entered create-session.ccxml [182_11]</log>
            <log>INFO: transition event [ccxml.loaded] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_sessionID" expr="evt.sessionid"/>
            <assign name="II_SB_oldNxtOpt" expr="getNextElement(0,II_SB_passValues,'|')"/>
            <assign name="II_SB_newNxtOpt" expr="getNextElement(1,II_SB_passValues,'|')"/>
            <assign name="II_SB_errCreateOpt" expr="getNextElement(2,II_SB_passValues,'|')"/>
            <assign name="II_SB_errMoveOpt" expr="getNextElement(3,II_SB_passValues,'|')"/>
            <assign name="II_SB_whichID" expr="getNextElement(4,II_SB_passValues,'|')"/>
       	    <assign name="II_SB_state" expr="'loaded'"/>
            <log>INFO: Old session next option [<value expr="II_SB_oldNxtOpt"/>]</log>
            <log>INFO: New session next option [<value expr="II_SB_newNxtOpt"/>]</log>
            <log>INFO: Create session error next option [<value expr="II_SB_errCreateOpt"/>]</log>
            <log>INFO: Move session error next option [<value expr="II_SB_errMoveOpt"/>]</log>
            <log>INFO: Specified connection ID [<value expr="II_SB_whichID"/>]</log>
            <send data="'dialog.user.getVariables'" target="II_SB_sessionID"/>
        </transition>

        <transition event="dialog.user.getVariables">
            <!-- In this transition, we return to the vxml layer to grab variables that will be passed
            to the new session -->
			<log>INFO: transition event [dialog.user.getVariables] state [<value expr="II_SB_state"/>]</log>
            <log>INFO: Get variables from [<value expr="'182_11.vxml'"/>]</log>
            <assign name="II_SB_state" expr="'getVariables'"/>
            <var name="II_SB_action" expr="'assign'"/>
            <dialogstart src="'file:' + II_SB_CODE_DIR + '182_11.vxml'" namelist="II_SB_action"/>
        </transition>

        <transition state="getVariables" event="dialog.exit" name="evt">
            <!-- We've returned from the vxml layer. Now we attempt to create a new ccxml session
            and pass any identified variables along -->
            <log>INFO: transition event [dialog.exit] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_indialog" expr="'false'"/>
			<var name="SB_UV_fileLocation" expr="evt.values.fileLocation"/>
			<var name="SB_UV_fileNumber" expr="evt.values.fileNumber"/>
        
            <assign name="II_SB_state" expr="'createSession'"/>
	        <assign name="II_SB_status" expr="'createSession'"/>
    		<createccxml sessionid="II_SB_startedSID" next="'file:'+II_SB_CODE_DIR+'begin.ccxml'" namelist="II_SB_status II_SB_type II_SB_newNxtOpt II_SB_whichID II_SB_VXML_LIB II_SB_projectSource SB_UV_fileLocation SB_UV_fileNumber"/>
	    </transition>

	    <transition state="createSession" event="ccxml.created" name="evt" cond="(II_SB_whichID == II_SB_obcallid) &amp;&amp; (II_SB_obcallid.length != 0)">
            <!-- Our attempt to create the session was successful. In this transition, we can assume that the
            create session node is being used as part of an out dial call. We'll attempt to move the connection
            ID of the outbound call to the new session -->
		    <log>INFO: transition event [ccxml.created] state [<value expr="II_SB_state"/>]</log>
	        <log>INFO: Started SID [<value expr="II_SB_startedSID"/>]</log>
		    <assign name="II_SB_state" expr="'moveID'"/>
	        <if cond="II_SB_startedSID != -1">
                <assign name="II_SB_newSID" expr="II_SB_startedSID"/>
    		    <!-- successful create. Move specified connection id to new session -->
    		    <move sessionid="II_SB_startedSID" source="II_SB_whichID"/>
	        <else/>
		        <!-- Create failed -->
		        <log>ERROR: CreateCCXML failed</log>
                <assign name="II_SB_whichOpt" expr="II_SB_errCreateOpt"/>
                <send data="'dialog.user.nextVXML'" target="II_SB_sessionID"/>
	        </if>
	    </transition>

	    <transition state="createSession" event="ccxml.created" name="evt">
            <!-- This transition handles the logic for creating a session that is not associated with
            an outbound call -->
		    <log>INFO: transition event [ccxml.created] state [<value expr="II_SB_state"/>]</log>
	        <log>INFO: Started SID [<value expr="II_SB_startedSID"/>]</log>
            <assign name="II_SB_newSID" expr="II_SB_startedSID"/>
		    <assign name="II_SB_state" expr="'moveID'"/>
            <assign name="II_SB_whichOpt" expr="II_SB_oldNxtOpt"/>
            <send data="'dialog.user.nextVXML'" target="II_SB_sessionID"/>
	    </transition>

	    <transition state="moveID" event="move.successful">
            <!-- Our move attempt was successful. Let's transition to the next option -->
			<log>INFO: transition event [move.successful] state [<value expr="II_SB_state"/>]</log>
  	        <log>INFO: Moved connection ID [<value expr="II_SB_whichID"/>] to SID [<value expr="II_SB_startedSID"/>]</log>
            <assign name="II_SB_obcallid" expr="''"/>
            <assign name="II_SB_whichOpt" expr="II_SB_oldNxtOpt"/>
            <send data="'dialog.user.nextVXML'" target="II_SB_sessionID"/>
        </transition>

        <transition event="fetch.done" name="evt">
			<log>INFO: transition event [fetch.done] state [<value expr="II_SB_state"/>]</log>
            <goto fetchid="evt.fetchid"/> <!-- Go to ccxml document -->
        </transition>

        <transition event="connection.disconnected" name="evt" cond="evt.connectionid == II_SB_obcallid">
            <!-- This event traps a disconnect triggered by a callee -->
			<log>INFO: transition event [connection.disconnected] state [<value expr="II_SB_state"/>]</log>
            <log>INFO: Connectionid [<value expr="II_SB_obcallid"/>]</log>
            <assign name="II_SB_obcallid" expr="''"/>
        </transition>

		<transition event="connection.disconnected" name="evt" cond="evt.connectionid == II_SB_connectionID">
            <!-- This event handles a disconnect triggered by a caller -->
			<log>INFO: transition event [connection.DISCONNECTED] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_ibcallid" expr="''"/>
			<assign name="II_SB_discID" expr="evt.connectionid"/>
			<assign name="II_SB_discReason" expr="evt.reason"/>
			<assign name="II_SB_discOriginator" expr="evt.connection.originator"/>
            <if cond="II_SB_indialog == 'true'">
                <assign name="II_SB_state" expr="'terminatingDialog'"/>
                <dialogterminate dialogid="II_SB_dialogID"/>
            <else/>
                <send data="'dialog.user.hangup'" target="II_SB_sessionID"/>
            </if>
        </transition>

        <transition state="terminatingDialog" event="dialog.exit" name="evt">
            <log>INFO: transition event [dialog.exit] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_indialog" expr="'false'"/>
            <send data="'dialog.user.hangup'" target="II_SB_sessionID"/>
        </transition>

		<transition event="dialog.user.hangup" name="evt">
            <!-- This event checks for the hang up template. If we find one, we'll transition to it -->
			<log>INFO: transition event [dialog.user.hangup] state [<value expr="II_SB_state"/>]</log>
            <log>INFO: Checking for hang up logic</log>
            <var name="II_SB_file1" expr="II_SB_CODE_DIR + 'hang-up.vxml'"/>
            <var name="II_SB_file2" expr="''"/>
            <var name="II_SB_fileOprtn" expr="'stat'"/>
			<assign name="II_SB_state" expr="'hangUp'"/>
            <dialogstart src="'file:' + II_SB_BASE_DIR + 'lib/vxml/fileUtil.vxml'" namelist="II_SB_file1 II_SB_file2 II_SB_fileOprtn"/> <!-- Check for Hangup logic -->
		</transition>

        <transition state="hangUp" event="dialog.exit" name="evt">
            <!-- Return from vxml dialog -->
            <log>INFO: transition event [dialog.exit] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_state" expr="'endCall'"/>
            <assign name="II_SB_indialog" expr="'false'"/>
            <if cond="evt.values.II_SB_status != 'Failure'">
                <if cond="evt.values.II_SB_fileSize != ''">
                    <log>INFO: Found hang up node</log>
                    <assign name="II_SB_state" expr="'hangUpReturn'"/>
                    <dialogstart src="'file:' + II_SB_CODE_DIR + 'hang-up.vxml'" namelist="II_SB_discID II_SB_discReason II_SB_discOriginator"/>
                <else/>
                    <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
                </if>
            <else/>
                <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
            </if>
        </transition>

        <transition state="hangUpReturn" event="dialog.exit" name="evt">
            <!-- Return from vxml dialog -->
            <log>INFO: transition event [dialog.exit] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_indialog" expr="'false'"/>
            <assign name="II_SB_status" expr="evt.values.II_SB_status"/>
            <if cond="(II_SB_status == 'endCall') || (II_SB_status == 'hangup')">
                <log>INFO: End call</log>
                <assign name="II_SB_state" expr="'endCall'"/>
                <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
            <else/>
                <assign name="II_SB_whichOpt" expr="evt.values.II_SB_nextOpt"/>
          		<assign name="II_SB_passValues" expr="evt.values.II_SB_returnValues"/>
                <send data="'dialog.user.nextVXML'" target="II_SB_sessionID"/>
            </if>
        </transition>

        <transition event="dialog.user.nextVXML">
        	<!-- This option returns the call to the VXML so that whatever happens, this is the next transition -->
			<log>INFO: transition event [dialog.user.nextVXML] state [<value expr="II_SB_state"/>]</log>
            <log>INFO: Going to Next VXML</log>
            <log>INFO: nxtOpt [<value expr="II_SB_whichOpt"/>]</log>
            <if cond="II_SB_whichOpt == ''|| II_SB_whichOpt == undefined">
                <assign name="II_SB_state" expr="'endCall'"/>
                <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
            <else/>
                <assign name="II_SB_state" expr="'nextOptionRun'"/>
                <if cond="II_SB_ibcallid != ''">
                    <join id1="II_SB_ibcallid" id2="'VXML_CHANNEL'"/>
                <else/>
                    <send data="'dialog.user.startDialog'" target="II_SB_sessionID"/>
                </if>
            </if>
        </transition>

		<transition state="nextOptionRun" event="conference.joined" name="evt" cond="evt.id1 == II_SB_ibcallid">
			<log>INFO: transition event [conference.joined] state [<value expr="II_SB_state"/>]</log>
            <send data="'dialog.user.startDialog'" target="II_SB_sessionID"/>
        </transition>

		<transition state="nextOptionRun" event="dialog.user.startDialog">
			<log>INFO: transition event ["dialog.user.startDialog] state [<value expr="II_SB_state"/>]</log>
            <var name="II_SB_action" expr="'nextOpt'"/>
            <dialogstart src="'file:' + II_SB_CODE_DIR + '182_11.vxml'" namelist="II_SB_newSID II_SB_action II_SB_whichOpt"/>
        </transition>

        <transition state="nextOptionRun endCall" event="dialog.exit" name="evt">
            <!-- Return from vxml dialog -->
            <log>INFO: transition event [dialog.exit] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_indialog" expr="'false'"/>
            <assign name="II_SB_status" expr="evt.values.II_SB_status"/>
      		<assign name="II_SB_NEXT_OPTION" expr="evt.values.II_SB_nextOpt"/>
            <log>INFO: status to check on the dialog.exit - <value expr="II_SB_status"/></log>
            <if cond="(II_SB_status == 'endCall') || (II_SB_status == 'hangup') || (II_SB_state == 'endCall')">
                <log>INFO: End call</log>
                <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
            <elseif cond="II_SB_status == 'outDialCheck'"/>
                <log>INFO: Checking Out Dial status</log>
                <var name="II_SB_fromCCXML" expr="'true'"/>
                <dialogstart src="'file:' + II_SB_CODE_DIR + II_SB_NEXT_OPTION + '.vxml'" namelist="II_SB_obcallid II_SB_fromCCXML"/>
            <elseif cond="II_SB_status == 'transfer'"/>
                <log>INFO: Transfering to a new program</log>
                <var name="II_SB_transfer" expr="'yes'"/>
                <assign name="II_SB_projectSource" expr="'listen_transcription'"/>
                <var name="II_SB_importedValue" expr="evt.values.II_SB_valueToPass"/>
				<if cond="II_SB_NEXT_OPTION != ''">
                <fetch next="'file:' + II_SB_BASE_DIR + II_SB_NEXT_OPTION + '/begin.ccxml'" namelist="II_SB_VXML_LIB II_SB_status II_SB_local II_SB_remote II_SB_originator II_SB_protocol II_SB_connectionID II_SB_type II_SB_ibcallid II_SB_transfer II_SB_projectSource II_SB_obcallid II_SB_CODE_DIR II_SB_line II_SB_importedValue"/>
				<else/>
					<assign name="II_SB_state" expr="'endCall'"/>
					<send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
				</if>
            <else/>
		        <assign name="II_SB_passValues" expr="evt.values.II_SB_returnValues"/>
        		<log>INFO: II_SB_NEXT_OPTION = '<value expr="II_SB_NEXT_OPTION"/>'</log>
        		<log>INFO: II_SB_passValues = '<value expr="II_SB_passValues"/>'</log>
        		<if cond="II_SB_NEXT_OPTION != ''">
					<fetch next="'file:' + II_SB_CODE_DIR + II_SB_NEXT_OPTION + '.ccxml'" namelist="II_SB_VXML_LIB II_SB_status II_SB_NEXT_OPTION II_SB_local II_SB_remote II_SB_originator II_SB_protocol II_SB_connectionID II_SB_type II_SB_CODE_DIR II_SB_BASE_DIR II_SB_ibcallid confid II_SB_passValues II_SB_projectSource II_SB_obcallid"/>
				<else/>
					<assign name="II_SB_state" expr="'endCall'"/>
					<send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
				</if>
            </if>
        </transition>

        <transition event="dialog.user.basichttp" name="evt">
            <!-- This transition is triggered when an external component sends an event to the ccxml session.
            Here, we grab the data associated with the event and attempt to process it at the ccxml layer. NOTE:
            the expected input items are II_SB_basichttpEvent, II_SB_URI and II_SB_argument. The URI should be
            a relative file path to the first ccxml file of the project. So, /interact/apps/spotbuild/II_SB_URI will be
            full path to the file. II_SB_argument is assumed to be a string delimited by question marks ('?')-->
            <log>INFO: transition event [dialog.user.basichttp] state [<value expr="II_SB_state"/>]</log>
            <log>INFO: Event [<value expr="evt.II_SB_basichttpEvent"/>]</log>
            <if cond="evt.II_SB_basichttpEvent == 'CREATESESSION'">
                <log>INFO: uri [<value expr="evt.II_SB_URI"/>]</log>
                <log>INFO: argument [<value expr="evt.II_SB_argument"/>]</log>
                <var name="uri" expr="'file:' + II_SB_BASE_DIR + evt.II_SB_URI"/>
                <var name="II_SB_tmpArray" expr="'SessionID:'+II_SB_startedSID"/>
                <assign name="II_SB_importedValue" expr="extendJsonObj(evt.II_SB_argument,II_SB_tmpArray)"/>
                <log>INFO: Sending: [<value expr="uri + ' ' + II_SB_importedValue"/>]</log>
                <send data="'httpCreateSession'" targettype="'basichttp'" target="'http://localhost/spot/ccxml/createsession'" namelist="uri II_SB_importedValue"/>
            <else/>
                <!-- Future events -->
            </if>
        </transition>

        <!-- Custom Event Code -->
        <transition event="dialog.user.customEvent" name="evt">
            <log>INFO: transition event [dialog.user.customEvent] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_state" expr="'customEvent'"/>
            <assign name="II_SB_passValues" expr="evt.II_SB_eventToPass + '|' + evt.II_SB_valueToPass"/>
            <if cond="II_SB_indialog == 'true'">
                <send data="'dialog.user.termDialog'" target="II_SB_sessionID"/>
            <else/>
              	<assign name="II_SB_state" expr="'nextOptionRun'"/>
	        	<dialogstart src="'file:' + II_SB_CODE_DIR + 'customEvent.vxml'" namelist="II_SB_ibcallid II_SB_passValues"/>
            </if>
        </transition>

        <transition state="customEvent" event="dialog.exit">
            <log>INFO: transition event [dialog.exit] state [<value expr="II_SB_state"/>]</log>
            <var name="II_SB_indialog" expr="'false'"/>
          	<assign name="II_SB_state" expr="'nextOptionRun'"/>
	    	<dialogstart src="'file:' + II_SB_CODE_DIR + 'customEvent.vxml'" namelist="II_SB_ibcallid II_SB_passValues"/>
        </transition>

    	<!-- Terminates the currently running dialog. -->
	    <transition event="dialog.user.termDialog">
            <log>INFO: transition event [dialog.user.termDialog] state [<value expr="II_SB_state"/>]</log>
            <log>INFO: Terminating dialog [ <value expr="II_SB_dialogID" /> ]</log>
            <dialogterminate dialogid="II_SB_dialogID"/>
        </transition>

        <!-- Started VXML dialog -->
        <transition event="dialog.started" name="evt">
			<log>INFO: transition event [dialog.started] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_indialog" expr="'true'"/>
            <assign name="II_SB_dialogID" expr="evt.dialogid"/>
            <log>INFO: dialogID in the dialog.started - <value expr="II_SB_dialogID"/></log>
        </transition>

        <!-- catch dialog.exit -->
        <transition event="dialog.exit" name="evt">
			<log>INFO: transition event [dialog.exit] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_state" expr="'endCall'"/>
            <assign name="II_SB_indialog" expr="'false'"/>
            <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
        </transition>

        <!-- Catch dialog not started -->
        <transition event="error.dialog.notstarted" name="evt">
            <log>INFO: transition event [<value expr="evt.name"/>] state [<value expr="II_SB_state"/>]</log>
            <log>ERROR: Unable to start Dialog. REASON [<value expr="evt.reason"/>]</log>
            <assign name="II_SB_state" expr="'endCall'"/>
            <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
        </transition>

        <!-- Catch fetch error -->
        <transition event="error.fetch" name="evt">
            <log>INFO: transition event [<value expr="evt.name"/>] state [<value expr="II_SB_state"/>]</log>
            <log>ERROR: Unable to fetch document. REASON [<value expr="evt.reason"/>]</log>            
            <assign name="II_SB_state" expr="'endCall'"/>
            <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
        </transition>

        <!-- Catch errors -->
        <transition event="error.dialog.semantic" name="evt">
            <log>INFO: transition event [error.dialog.semantic] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_state" expr="'endCall'"/>
            <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
        </transition>

        <transition event="err*" name="errEV">
            <log>INFO: transition event [err*] state [<value expr="II_SB_state"/>]</log>
            <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
        </transition>

        <!-- Exit ccxml layer -->
        <transition event="dialog.user.endCall">
            <log>INFO: transition event [dialog.user.endCall] state [<value expr="II_SB_state"/>]</log>
            <exit/>
        </transition>

    </eventprocessor>
</ccxml>
