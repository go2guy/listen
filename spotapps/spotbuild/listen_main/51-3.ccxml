<?xml version="1.0" ?>
<ccxml version="1.0">

    <!-- Last Modified 06/08/2010
       *   @Name   incoming-call-action.ccxml
       *   @Desc   Answers or rejects a call. 
       *           If a call gets answered, the app 
       *           transitions to the next vxml dialog -->

    <!-- These variables are passed in from begin.ccxml -->
    <var name="II_SB_status"/>
    <var name="II_SB_NEXT_OPTION"/>
    <var name="II_SB_remote"/>
    <var name="II_SB_local"/>
    <var name="II_SB_originator"/>
    <var name="II_SB_protocol"/>
    <var name="II_SB_connectionID"/>
    <var name="II_SB_type"/>
    <var name="II_SB_CODE_DIR"/>
    <var name="II_SB_BASE_DIR"/>
    <var name="II_SB_ibcallid"/>
    <var name="II_SB_passValues"/>
    <var name="II_SB_VXML_LIB"/>
    <var name="II_SB_projectSource"/>
    <var name="II_SB_obcallid"/>

    <!-- Global variables -->
    <var name="II_SB_state" expr="'idle'"/>   <!-- state. This variable holds the CCXML dialog state -->    
    <var name="II_SB_dialogID" expr="''"/>    <!-- dialogID. Contains the ID for the last vxml dialog that was started -->
    <var name="II_SB_sessionID" expr="''"/>   <!-- sessionID. Contains the ID of the ccxml session -->
    <var name="II_SB_action" expr="''"/>      <!-- Action. Contains the inbound action 'accept' or 'reject' -->
    <var name="II_SB_indialog" expr="'false'"/>

	<!-- Disconnect variables -->
	<var name="II_SB_discID" expr="''"/>			<!-- Contains the connection id of party that triggered connection.disconnected event -->
	<var name="II_SB_discReason" expr="''"/>		<!-- Contains platform specific reason for disconnect -->
	<var name="II_SB_discOriginator" expr="''"/>	<!-- Identifies party that triggered connection.disconnected event -->

    <script src="file:/interact/apps/spotbuild/lib/js/lib.js"></script>     <!-- Location of java script file -->

    <!-- Begin executable code -->
    <eventprocessor statevariable="II_SB_state">

        <!-- Load CCXML file. Log status and update state -->
        <transition state="idle" event="ccxml.loaded" name="loadEv">
            <log>INFO: Entered incoming-call-action.ccxml [51-3]</log>
            <log>INFO: transition event [<value expr="loadEv.name"/>] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_sessionID" expr="loadEv.sessionid"/>
            <assign name="II_SB_state" expr="'loaded'"/>
            <assign name="II_SB_action" expr="getNextElement(0,II_SB_passValues,'|')"/>
            <assign name="II_SB_NEXT_OPTION" expr="getNextElement(1,II_SB_passValues,'|')"/>
            <assign name="II_SB_passValues" expr="''"/>
            <send data="'dialog.user.actionChk'" target="II_SB_sessionID"/>
        </transition>

        <transition state="loaded" event="dialog.user.actionChk">
            <log>INFO: transition event [dialog.user.actionChk] state [<value expr="II_SB_state"/>]</log>
            <if cond="II_SB_action == 'accept'">
	            <accept/> <!-- Throws connection.connected event -->
                <assign name="II_SB_state" expr="'callAccepted'"/>
            <elseif cond="II_SB_action == 'reject'"/>
	            <reject connectionid="II_SB_connectionID"/> <!-- Throws connection.disconnected event -->
                <assign name="II_SB_state" expr="'callRejected'"/>
            <elseif cond="II_SB_action == 'transfer'"/>
				<send data="'dialog.user.nextVXML'" target="II_SB_sessionID"/>
            <else/>
                <log>ERROR: Event [dialog.user.actionChk]. Unknown action [<value expr="II_SB_action"/>]</log>
                <assign name="II_SB_state" expr="'endCall'"/>
                <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
            </if>
        </transition>

        <!-- This option returns the call to the VXML so that whatever happens, this is the next transition -->
        <transition event="dialog.user.nextVXML">
            <log>INFO: Entered [dialog.user.nextVXML] with state [<value expr="II_SB_state"/>]</log>
            <log>INFO: II_SB_NEXT_OPTION [<value expr="II_SB_NEXT_OPTION"/>]</log>
			<log>INFO: II_SB_ibcallid [<value expr="II_SB_ibcallid"/>] II_SB_NEXT_OPTION [<value expr="II_SB_NEXT_OPTION"/>]</log>
            <if cond="(II_SB_NEXT_OPTION != '') &amp;&amp; (II_SB_NEXT_OPTION != 'undefined')">    
                <assign name="II_SB_state" expr="'nextOptionRun'"/>
                <dialogstart src="'file:' + II_SB_CODE_DIR + II_SB_NEXT_OPTION + '.vxml'" namelist="II_SB_ibcallid"/>
            <else/>
                <assign name="II_SB_state" expr="'endCall'"/>
                <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
            </if>
        </transition>
		
        <!-- Received connection.connected -->
	    <transition state="callAccepted" event="connection.connected">
            <log>INFO: transition event [connection.connected] state [<value expr="II_SB_state"/>]</log>
            <log>INFO: II_SB_remote [<value expr="II_SB_remote"/>]</log>
            <log>INFO: II_SB_local [<value expr="II_SB_local"/>]</log>
            <log>INFO: connection ID [<value expr="II_SB_connectionID"/>]</log>
            <log>INFO: CALL TYPE [<value expr="II_SB_type"/>]</log>
			<send data="'dialog.user.nextVXML'" target="II_SB_sessionID"/>
	    </transition>

        <!-- Unable to complete <accept> request -->
        <transition event="connection.accept.failed" name="evt">
            <log>INFO: transition event [<value expr="evt.name"/>] state [<value expr="II_SB_state"/>]</log>
            <log>ERROR: Unable to accept call. REASON [<value expr="evt.reason"/>]</log>
            <assign name="II_SB_state" expr="'endCall'"/>
            <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
        </transition>

        <!-- Unable to complete <reject> request -->
        <transition event="connection.reject.failed" name="evt">
            <log>INFO: transition event [<value expr="evt.name"/>] state [<value expr="II_SB_state"/>]</log>
            <log>ERROR: Unable to reject call. REASON [<value expr="evt.reason"/>]</log>
            <assign name="II_SB_state" expr="'endCall'"/>
            <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
        </transition>

        <!-- Unable to complete <accept> or <reject> request -->
        <transition event="connection.failed" name="evt">
            <log>INFO: transition event [<value expr="evt.name"/>] state [<value expr="II_SB_state"/>]</log>
            <log>ERROR: Connection failed. REASON [<value expr="evt.reason"/>]</log>
            <assign name="II_SB_state" expr="'endCall'"/>
            <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
        </transition>

        <!-- Fetched ccxml document -->
        <transition event="fetch.done" name="evt">
            <log>INFO: transition event [fetch.done] state [<value expr="II_SB_state"/>]</log>
            <goto fetchid="evt.fetchid"/> <!-- Go to ccxml document -->
        </transition>

        <!-- Started VXML dialog -->
        <transition event="dialog.started" name="evt">
            <assign name="II_SB_indialog" expr="'true'"/>
            <assign name="II_SB_dialogID" expr="evt.dialogid"/>
        </transition>

        <!-- Return from vxml dialog -->
        <transition state="nextOptionRun endCall" event="dialog.exit" name="evt">
            <assign name="II_SB_indialog" expr="'false'"/>
            <log>INFO: transition event [dialog.exit] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_status" expr="evt.values.II_SB_status"/>
    		<assign name="II_SB_NEXT_OPTION" expr="evt.values.II_SB_nextOpt"/>
            <if cond="(II_SB_status == 'endCall') || (II_SB_status == 'hangup') || (II_SB_state == 'endCall')">
                <log>INFO: End call</log>
                <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
            <elseif cond="II_SB_status == 'outDialCheck'"/>
                <log>INFO: Checking Out Dial status</log>
                <var name="II_SB_fromCCXML" expr="'true'"/>
                <dialogstart src="'file:' + II_SB_CODE_DIR + II_SB_NEXT_OPTION + '.vxml'" namelist="II_SB_obcallid II_SB_fromCCXML"/>
            <elseif cond="II_SB_status == 'transfer'"/>
                <log>INFO: Transfering to a new program</log>
                <var name="II_SB_transfer" expr="'yes'"/>
                <assign name="II_SB_projectSource" expr="'listen_main'"/>
                <var name="II_SB_importedValue" expr="evt.values.II_SB_valueToPass"/>
		        <fetch next="'file:' + II_SB_BASE_DIR + II_SB_NEXT_OPTION + '/begin.ccxml'" namelist="II_SB_status II_SB_local II_SB_remote II_SB_originator II_SB_protocol II_SB_connectionID II_SB_type II_SB_VXML_LIB II_SB_ibcallid II_SB_transfer II_SB_projectSource II_SB_obcallid II_SB_importedValue"/>
            <else/>
		        <assign name="II_SB_passValues" expr="evt.values.II_SB_returnValues"/>
        		<log>INFO: II_SB_NEXT_OPTION [<value expr="II_SB_NEXT_OPTION"/>]</log>
        		<log>INFO: II_SB_passValues [<value expr="II_SB_passValues"/>]</log>
                <if cond="II_SB_NEXT_OPTION == 'undefined'">
                    <log>INFO: Next Option undefined, Ending Call</log>
                    <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
                <else/>
            		<fetch next="'file:' + II_SB_CODE_DIR + II_SB_NEXT_OPTION + '.ccxml'" namelist="II_SB_status II_SB_NEXT_OPTION II_SB_local II_SB_remote II_SB_originator II_SB_protocol II_SB_connectionID II_SB_type II_SB_VXML_LIB II_SB_CODE_DIR II_SB_BASE_DIR II_SB_ibcallid II_SB_passValues II_SB_projectSource II_SB_obcallid"/>
                </if>
            </if>
        </transition>

        <transition event="dialog.user.basichttp" name="evt">
            <!-- This transition is triggered when an external component sends an event to the ccxml session.
            Here, we grab the data associated with the event and attempt to process it at the ccxml layer. NOTE:
            the expected input items are II_SB_basichttpEvent, II_SB_URI and II_SB_argument. The URI should be
            a relative file path to the first ccxml file of the project. So, /interact/apps/spotbuild/II_SB_URI will be
            full path to the file. II_SB_argument is assumed to be a string delimited by question marks ('?')-->
            <log>INFO: transition event [dialog.user.basichttp] state [<value expr="II_SB_state"/>]</log>
            <log>INFO: Event [<value expr="evt.II_SB_basichttpEvent"/>]</log>
            <if cond="evt.II_SB_basichttpEvent == 'CREATESESSION'">
                <log>INFO: uri [<value expr="evt.II_SB_URI"/>]</log>
                <log>INFO: argument [<value expr="evt.II_SB_argument"/>]</log>
                <var name="uri" expr="'file:' + II_SB_BASE_DIR + evt.II_SB_URI"/>
                <assign name="II_SB_importedValue" expr="evt.II_SB_argument"/>
                <log>INFO: Sending: [<value expr="uri + ' ' + II_SB_importedValue"/>]</log>
                <send data="'httpCreateSession'" targettype="'basichttp'" target="'http://localhost/spot/ccxml/createsession'" namelist="uri II_SB_importedValue"/>
            <else/>
                <!-- Future events -->
            </if>
        </transition>

        <!-- Custom Event Code -->
        <transition event="dialog.user.customEvent" name="evt">
            <log>INFO: Received a customEvent</log>
            <assign name="II_SB_state" expr="'customEvent'"/>
            <assign name="II_SB_passValues" expr="evt.II_SB_eventToPass + '|' + evt.II_SB_valueToPass"/>
            <if cond="II_SB_indialog == 'true'">
                <send data="'dialog.user.termDialog'" target="II_SB_sessionID"/>
            <else/>
              	<assign name="II_SB_state" expr="'nextOptionRun'"/>
	        	<dialogstart src="'file:' + II_SB_CODE_DIR + 'customEvent.vxml'" namelist="II_SB_ibcallid II_SB_passValues"/>
            </if>
        </transition>

        <transition state="customEvent" event="dialog.exit">
            <log>PHILLIP: entered the broadcast Message with dialog.exit</log>
            <var name="II_SB_indialog" expr="'false'"/>
          	<assign name="II_SB_state" expr="'nextOptionRun'"/>
	    	<dialogstart src="'file:' + II_SB_CODE_DIR + 'customEvent.vxml'" namelist="II_SB_ibcallid II_SB_passValues"/>
        </transition>

    	<!-- Terminates the currently running dialog. -->
	    <transition event="dialog.user.termDialog">
            <log>INFO: transition event [dialog.user.termDialog] state [<value expr="II_SB_state"/>]</log>
            <log>INFO: Terminating dialog [ <value expr="II_SB_dialogID" /> ]</log>
            <dialogterminate dialogid="II_SB_dialogID"/>
        </transition>

        <!-- Catch for the disconnect of the obcallid -->
        <transition event="connection.disconnected" name="evt" cond="evt.connectionid == II_SB_obcallid">
            <log>INFO: caught the connection.disconnected from the hangup from connectionid - <value expr="II_SB_obcallid"/></log>
            <assign name="II_SB_obcallid" expr="''"/>
        </transition>

		<transition event="connection.disconnected" name="evt" cond="evt.connectionid == II_SB_connectionID">
            <log>INFO: transition event [connection.DISCONNECTED] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_ibcallid" expr="''"/>
			<assign name="II_SB_discID" expr="evt.connectionid"/>
			<assign name="II_SB_discReason" expr="evt.reason"/>
			<assign name="II_SB_discOriginator" expr="evt.connection.originator"/>
            <if cond="II_SB_indialog == 'true'">
                <assign name="II_SB_state" expr="'terminatingDialog'"/>
                <dialogterminate dialogid="II_SB_dialogID"/>
            <else/>
                <send data="'dialog.user.hangup'" target="II_SB_sessionID"/>
            </if>
        </transition>

        <transition state="terminatingDialog" event="dialog.exit" name="evt">
            <log>INFO: transition event [dialog.exit] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_indialog" expr="'false'"/>
            <send data="'dialog.user.hangup'" target="II_SB_sessionID"/>
        </transition>

		<transition event="dialog.user.hangup" name="evt">
			<log>INFO: transition event [dialog.user.hangup] state [<value expr="II_SB_state"/>]</log>
            <var name="II_SB_file1" expr="II_SB_CODE_DIR + 'hang-up.vxml'"/>
            <var name="II_SB_file2" expr="''"/>
            <var name="II_SB_fileOprtn" expr="'stat'"/>
			<assign name="II_SB_state" expr="'hangUp'"/>
            <dialogstart src="'file:' + II_SB_BASE_DIR + 'lib/vxml/fileUtil.vxml'" namelist="II_SB_file1 II_SB_file2 II_SB_fileOprtn"/> <!-- Check for Hangup logic -->
		</transition>

        <!-- Return from vxml dialog -->
        <transition state="hangUp" event="dialog.exit" name="evt">
            <log>INFO: transition event [dialog.exit] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_state" expr="'endCall'"/>
            <assign name="II_SB_indialog" expr="'false'"/>
            <if cond="evt.values.II_SB_status != 'Failure'">
                <if cond="evt.values.II_SB_fileSize != ''">
                    <log>INFO: Found hang up node</log>
                    <dialogstart src="'file:' + II_SB_CODE_DIR + 'hang-up.vxml'" namelist="II_SB_discID II_SB_discReason II_SB_discOriginator"/>
                <else/>
                    <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
                </if>
            <else/>
                <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
            </if>
        </transition>

        <!-- Catch dialog not started -->
        <transition event="error.dialog.notstarted" name="evt">
            <log>INFO: transition event [<value expr="evt.name"/>] state [<value expr="II_SB_state"/>]</log>
            <log>ERROR: Unable to start Dialog. REASON [<value expr="evt.reason"/>]</log>
            <assign name="II_SB_state" expr="'endCall'"/>
            <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
        </transition>

        <!-- Catch fetch error -->
        <transition event="error.fetch" name="evt">
            <log>INFO: transition event [<value expr="evt.name"/>] state [<value expr="II_SB_state"/>]</log>
            <log>ERROR: Unable to fetch document. REASON [<value expr="evt.reason"/>]</log>            
            <assign name="II_SB_state" expr="'endCall'"/>
            <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
        </transition>

        <!-- Catch errors -->
        <transition event="error.dialog.semantic" name="evt">
            <log>INFO: transition event [error.dialog.semantic] state [<value expr="II_SB_state"/>]</log>
            <assign name="II_SB_state" expr="'endCall'"/>
            <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
        </transition>

        <transition event="err*" name="errEV">
            <log>INFO: transition event [err*] state [<value expr="II_SB_state"/>]</log>
            <log>ERROR: Reason [<value expr="errEV.reason"/>]</log>
            <assign name="II_SB_state" expr="'endCall'"/>
            <send data="'dialog.user.endCall'" target="II_SB_sessionID"/>
        </transition>

        <!-- Exit ccxml layer -->
        <transition event="dialog.user.endCall">
            <log>INFO: transition event [dialog.user.endCall] state [<value expr="II_SB_state"/>]</log>
            <exit/>
        </transition>

    </eventprocessor>
</ccxml>
