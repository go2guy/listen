<?xml version="1.0"?>
<!DOCTYPE ccxml PUBLIC '-//W3C/DTD CCXML 1.0//EN' "http://www.w3.org/TR/ccxml/ccxml.dtd">
<ccxml version="1.0">
    <!-- Last Modified 08/24/2011
       *   @Name	dial.ccxml
       *   @Desc	This script handles all out dial activities. -->

    <!-- Exports from Spotbuild project -->
    <var name="II_SB_VXML_LIB"/>        <!-- VXML Lib path -->
    <var name="II_SB_status"/>          <!-- status. This variable is used for application control -->
    <var name="II_SB_local"/>           <!-- Dialed ID -->
    <var name="II_SB_remote"/>          <!-- Origination ID -->
    <var name="II_SB_originator"/>      <!-- Call originator -->
    <var name="II_SB_protocol"/>        <!-- Call protocol -->
    <var name="II_SB_connectionID"/>    <!-- II_SB_connectionID. Contains the ID of the connection for this call -->
    <var name="II_SB_type"/>            <!-- II_SB_type.Contains the type of call - VOIP, PSTN -->
    <var name="II_SB_ibcallid"/>        <!-- ibcallid. In bound connection id -->
    <var name="II_SB_transfer"/>        <!-- transfer. Determins if this call is a transfer from another program -->
    <var name="II_SB_projectSource"/>   <!-- projectSource. -->
    <var name="II_SB_obcallid"/>        <!-- obcallid. Out bound connection id -->
    <var name="II_SB_CODE_DIR"/>        <!-- CODE_DIR. Application directory under base directory. Contains all code -->
    <var name="II_SB_line"/>            <!-- Line number processing call -->

    <!-- Values passed in from other ccxml -->
    <var name="ANI"/>       <!-- ANI. Origination ID of current call -->
    <var name="DNIS"/>      <!-- DNIS. Destination ID -->
    <var name="tmpANI"/>    <!-- ANI. -->
    <var name="tmpDNIS"/>   <!-- DNIS. -->
    <var name="APP_PATH"/>  <!-- App Path. Base application directory -->
    <var name="SB_PATH"/>   <!-- Spotbuild Path. Base directory for spotbuild -->
    <var name="callType"/>  <!-- Call type. Identifies a call as: service, extension or external. Service calls will be allowed to reoriginate -->
    <var name="ibconnid"/>  <!-- Inbound connection ID -->
    <var name="obconnid"/>  <!-- Outbound connection ID -->
    <var name="EXT_LENGTH"/>        <!-- Extension length -->
    <var name="importedValue"/>     <!-- Imported Value. Values passed in from Listen application -->
    <var name="origDNIS"/>          <!-- Stores the original DNIS in a forwarded scenario -->

    <!-- Global Vars -->
    <var name="request" expr="'post'"/>
    <var name="maxTime" expr="0"/>
    <var name="ip" expr="''"/>              <!-- IP. IP Address of phone client -->
    <var name="state" expr="'idle'"/>       <!-- State. Used to track which state a transition is in -->
    <var name="dialogID" expr="''"/>        <!-- Dialog ID. Stores value of last VXML dialog that was started -->
    <var name="status" expr="''"/>          <!-- Status. Stores application status -->
    <var name="inVXML" expr="'n'"/>         <!-- In VXML. Determines if this session is currently running a vxml dialog -->
    <var name="ringToneID" expr="''"/>      <!-- Dialog ID of ring tone -->
    <var name="II_SB_promptID" expr="''"/>
    <var name="moveRequestSID" expr="''"/>  <!-- Session ID involved in an attended transfer -->
    <var name="xferConnID" expr="''"/>
    <var name="xferSID" expr="''"/>
    <var name="URI" expr="''"/>
    <var name="requestToID" expr="''"/>
    <var name="requestFromID" expr="''"/>
    <var name="playRingTone" expr="'y'"/>
    <var name="requestID" expr="''"/>
    <var name="voipDirection" expr="''"/>
    <var name="userEntry" expr="''"/>
    <var name="code" expr="''"/>
    <var name="isFwd" expr="'false'"/>
    <var name="LINE_NUMBER" expr="''"/>
    <var name="startTime" expr="getTimeStamp(3)"/>
    <var name="endTime" expr="startTime"/>
    <var name="match_key" expr="''"/>
    <var name="findMeObj" expr="''"/>
    <var name="findMeIDList" expr="''"/>
    <var name="fmConfigCnt" expr="0"/>
    <var name="fmGrpCnt" expr="0"/>
    <var name="fmConfigIndex" expr="0"/>
    <var name="fmGrpIndex" expr="0"/>
    <var name="fmFailedCalls" expr="0"/>
    <var name="listenToID" expr="''"/>
    <var name="findMeConfiguration" expr="''"/>
    <var name="returnApp" expr="''"/>
    <var name="TIME_OUT" expr="'25'"/>
    <var name="officeOptr" expr="'101'"/>   <!-- Operator's extension -->
    <var name="fromCCXML" expr="'DIAL'"/>
    <var name="DB_PATH" expr="'http://localhost/ippbx/'"/>
    <var name="logFile" expr="'file:/interact/logs/exceptionLog'"/>
    <var name="waitList" expr="'callConnected,dialing,findMe,stopFindMe,disconnected,gotSignal,blindXfer,attemptRingPickUp,attemptMove,gotXferReq'"/>

    <!-- Out dial vars -->
    <var name="CALL_ANI" expr="''"/>
    <var name="CALL_DNIS" expr="''"/>
    <var name="OUTSIDE_LINE" expr="'9'"/>
    <var name="callResult" expr="'No Answer'"/>

    <!-- Dial Errors -->
    <var name="dialFailReason" expr="''"/>
    <var name="ERR_BUSY" expr="'486,600'"/>     <!-- Dialed destination return a busy response -->
    <var name="ERR_NOT_FOUND" expr="'404'"/>    <!-- Dialed destination was not found -->
    <var name="REQUEST_TIMEOUT" expr="'408'"/>  <!-- Dialed attempt timed out -->

    <!-- Constants -->
    <var name="LIB_PATH" expr="''"/>        <!-- Lib Path. Direcotry for lib files -->
    <var name="SUP_PATH" expr="''"/>        <!-- Support Path. Directory for support files -->
    <var name="LISTEN_APP" expr="''"/>
    <var name="TRANS_PATH" expr="''"/>      <!-- Transactions Path. Directory for transaction files -->
    <var name="AUDIO_PATH" expr="''"/>      <!-- Audio Path. Directory for audio files -->
    <var name="SIP_SERVER" expr="''"/>      <!-- Name of SIP Trunk server for inbound/outbound calls -->
    <var name="BLIND_XFER" expr="'2'"/>
    <var name="ATTND_XFER" expr="'3'"/>
    <var name="SHORT_CODE" expr="'**'"/>
    <var name="VOICEMAIL_XFER" expr="'1'"/>


    <script src="file:/interact/apps/spotbuild/lib/js/lib.js"/>    <!-- Location of Java script file -->
    <script src="file:/interact/apps/spotbuild/lib/js/stringify.js"/>    <!-- Location of Java script file -->

    <script>
        <![CDATA[
            function callInfoParams (SID, ani, dnis) {
                if ((ani.length > 0) && (dnis.length > 0))
                    return "{\"ani\":\""+ ani +"\", \"dnis\":\""+ dnis +"\", \"sessionId\":\""+ SID + "\"}";
                else
                    return "{\"sessionId\":\""+ SID + "\"}";
            }

            function cdrParams(startTime, endTime, callType, ANI, DNIS, callResult, organization) {
                var duration = endTime - startTime;
                if(endTime == '0')
                    duration = '0';
                return "{\"date\": \""+iiDateToISO(startTime)+"\", \"service\": \""+callType+"\", \"duration\":"+duration+", \"ani\":\""+ANI+"\", \"dnis\":\""+DNIS+"\", \"result\":\""+callResult+"\", \"organization\": {\"href\":\""+organization+"\"}}";
            }

            function getExtID (dest) {
                var result = new String(dest).split('@');
                return result[0].replace(/\D/g,'');
            }

            function setANI (ani) {
                var tmp = ani.split('sip:')[0];
                if (tmp.length != 0)
                    ani = 'sip:' + ani;
                return ani;
            }

            function dialResult(jsonObj) {
                var result = eval("("+jsonObj+")");
                if ((result.length == 1) && (result[0].length == 1))
                    return result[0][0].number;
                else
                    return 'findMe';
            }

            function findMeConfigCount(findMeConfigObj, index) {
                var configCount = 0;
                var result = eval("("+findMeConfigObj+")");
                var num = /^\d+$/;
                if (typeof(result.length) != 'undefined') {
                    configCount = result.length;
                }
                if ((num.test(index)) && (index < configCount)) {
                    configCount = result[index].length;
                }
                return configCount;
            }

            function getFindMeConfiguartion(findMeConfigObj, configIndex, groupIndex, flag) {
                var tmpObj = eval("("+findMeConfigObj+")");
                var num = /^\d+$/;
                var result = '';
                var configCount = 0;
                if (typeof(tmpObj.length) != 'undefined') {
                    configCount = tmpObj.length;
                }
                if ((num.test(configIndex)) && (num.test(groupIndex))) {
                    if ((configIndex < tmpObj.length) && (groupIndex < tmpObj[configIndex].length)) {
                        var tmpVal = tmpObj[configIndex][groupIndex][flag];
                        if ((typeof(tmpVal) != 'undefined') && (tmpVal != 'null'))
                            result = tmpVal;
                    }
                }
                return result;
            }

            function shrink(value, list, delimiter)
            {
                var i = 0;
                var result = '';
                var tmpAry = list.split(delimiter);

                while (i < tmpAry.length) {
                    if ((value != tmpAry[i]) && (tmpAry[i] != delimiter) && (tmpAry[i].length != 0))
                        result = result + tmpAry[i] + delimiter;
                    i++;
                }
                return result;
            }
        ]]>
    </script>

    <eventprocessor statevariable="state">  <!-- Here is where executable code begins -->

        <transition state="idle" event="ccxml.loaded" name="evt">
            <!-- Loaded new ccxml script. Set variables -->
            <log>INFO: Entered [ccxml.loaded] with state [<value expr="state"/>]</log>
            <assign name="LIB_PATH" expr="SB_PATH+'lib/vxml/'"/>
            <assign name="AUDIO_PATH" expr="APP_PATH+'audio/'"/>
            <assign name="SUP_PATH" expr="APP_PATH+'support/'"/>
            <assign name="TRANS_PATH" expr="APP_PATH+'transactions/'"/>
            <assign name="state" expr="'loaded'"/>
            <log>INFO: APP Path [<value expr="APP_PATH"/>]</log>
            <log>INFO: Lib Path [<value expr="LIB_PATH"/>]</log>
            <log>INFO: Audio Path [<value expr="AUDIO_PATH"/>]</log>
            <log>INFO: Suppport Path [<value expr="SUP_PATH"/>]</log>
            <log>INFO: Destination [<value expr="DNIS"/>]</log>
            <log>INFO: Origination [<value expr="ANI"/>]</log>
            <log>INFO: Call type [<value expr="callType"/>]</log>
            <log>INFO: Inbound connection ID [<value expr="ibconnid"/>]</log>
            <if cond="tmpDNIS == '0'">
                <!-- If caller dialed zero, we'll call the operator's extension -->
                <assign name="tmpDNIS" expr="officeOptr"/>
            </if>
            <assign name="tmpDNIS" expr="getExtID(tmpDNIS)"/>
            <log>INFO: DNIS [<value expr="tmpDNIS"/>]</log>
            <log>INFO: Orig DNIS [<value expr="origDNIS"/>]</log>
            <assign name="LINE_NUMBER" expr="getNextElement(0,session.id,'.')"/>
            <assign name="returnApp" expr="getJsonVal(importedValue, 'dialReturnApp')"/>
            <log>INFO: Dial Return App [<value expr="returnApp"/>]</log>
            <send data="'dialog.user.chkCallType'" target="session.id"/>
        </transition>

        <transition event="dialog.user.chkCallType" name="evt">
            <!-- Here, we check the value of our callType variable and carry out some call forwarding logic.
            If the callType variable indicates that this script was called from hold.ccxml, then we'll go sit
            in the monitor transition until the next event comes in. Otherwise, we'll attempt to create a call
            to the destination value we have --> 
            <log>INFO: Entered [dialog.user.chkCallType] with state [<value expr="state"/>]</log>
            <if cond="((callType == 'fromHold') || (callType == 'fromXfer'))">
                <log>INFO: Call in progress...</log>
                <log target="status">Call in progress</log>
                <assign name="state" expr="'callConnected'"/>
                <assign name="callResult" expr="'Call Answered'"/>
                <send data="'dialog.user.keyPress'" target="session.id"/>
            <elseif cond="tmpDNIS.length &lt; EXT_LENGTH"/>
                <if cond="((origDNIS.length != undefined) &amp;&amp; (origDNIS == tmpDNIS))">
                    <!-- If the origDNIS variable is equal to the current tmpDNIS, we're likely dealing with a
                    blindtransfer request that needs to go to voice mail -->
                    <assign name="LISTEN_APP" expr="'listen_voicemail'"/>
                    <send data="'dialog.user.listenApp'" target="session.id"/>
                <else/>
                    <if cond="importedValue.length &gt; 0">
                        <!-- This is part of the forwarding/findMe logic. Before dialing an internal extension
                        we need to make sure it is not forwarded or configured for findMe -->
                        <assign name="state" expr="'chkFwd'"/>
                        <var name="accessNum" expr="tmpDNIS"/>
                        <var name="whichRsrc" expr="'dial'"/>
       	   		        <dialogstart src="'file:'+TRANS_PATH+'chkPhoneConfig.vxml'" namelist="importedValue whichRsrc accessNum"/>
                    </if>
                </if>
            <else/>
                <!-- This is an external call. Check if caller is permitted to dial the external number -->
                <send data="'dialog.user.chkBlkList'" target="session.id"/>
            </if>
        </transition>

        <transition state="chkFwd" event="dialog.exit" name="evt">
            <!-- Back from checking if extension is forwarded/findMe. If it is, we'll update our destination accordingly.
            Otherwise, we need to check if this caller has permission to dial this number. -->
            <log>INFO: Entered [dialog.exit] with state [<value expr="state"/>]</log>
            <assign name="inVXML" expr="'n'"/>
            <var name="result" expr="evt.values.result"/>
            <var name="status" expr="evt.values.status"/>
            <if cond="status != 'Failure'">
                <var name="extConfig" expr="dialResult(result)"/>
                <if cond="extConfig == 'findMe'">
                    <assign name="findMeConfiguration" expr="result"/>
                    <assign name="fmConfigCnt" expr="findMeConfigCount(findMeConfiguration,'')"/>
                    <assign name="fmGrpCnt" expr="findMeConfigCount(findMeConfiguration,fmConfigIndex)"/>
                    <log>INFO: Number of Configured Groups [<value expr="fmConfigCnt"/>]</log>
                    <log>INFO: Group 1 count [<value expr="fmGrpCnt"/>]</log>
                    <send data="'dialog.user.findMe'" target="session.id"/>
                <elseif cond="extConfig != tmpDNIS"/>
                    <log>INFO: Extension [<value expr="tmpDNIS"/>] is forwarded to [<value expr="extConfig"/>]</log>
                    <assign name="origDNIS" expr="DNIS"/> <!-- Let's save off original destination for possible later use -->
                    <assign name="isFwd" expr="'true'"/>
                    <assign name="DNIS" expr="extConfig"/>
                    <assign name="tmpDNIS" expr="extConfig"/>
                    <if cond="((tmpANI == DNIS) &amp;&amp; (origDNIS.length &gt; 0))">
                        <!-- This implies that the extension we are forwarded to is calling our extension.
                        In this case, we'll go directly to our voice mail -->
                        <assign name="LISTEN_APP" expr="'listen_voicemail'"/>
                        <send data="'dialog.user.listenApp'" target="session.id"/>
                    <else/>
                        <send data="'dialog.user.chkBlkList'" target="session.id"/>
                    </if>
                <else/>
                    <send data="'dialog.user.chkBlkList'" target="session.id"/>
                </if>
            <else/>
                <!-- This covers situations where our request to the controller failed. We'll allow the dial to proceed -->
                <send data="'dialog.user.chkBlkList'" target="session.id"/>
            </if>
        </transition>

        <transition event="dialog.user.chkBlkList" name="evt">
            <!-- Let's verify caller has permission to dial number -->
            <log>INFO: Entered [dialog.user.chkBlkList] with state [<value expr="state"/>]</log>
            <if cond="iiNumber(tmpDNIS)">
                <assign name="state" expr="'chkBlackList'"/>
                <var name="destination" expr="tmpDNIS"/>
                <if cond="tmpDNIS[0] == OUTSIDE_LINE">
                    <assign name="destination" expr="iiSubstr(tmpDNIS,1,-1)"/>
                </if>
                <var name="accessNum" expr="tmpANI"/>
                <var name="whichRsrc" expr="'canDial'"/>
       	   	    <dialogstart src="'file:'+TRANS_PATH+'chkPhoneConfig.vxml'" namelist="importedValue whichRsrc accessNum destination"/>
            <else/>
                <send data="'dialog.user.call'" target="session.id"/>
            </if>
        </transition>

        <transition state="chkBlackList" event="dialog.exit" name="evt">
            <!-- Back from checking if caller has permission to dial number -->
            <log>INFO: Entered [dialog.exit] with state [<value expr="state"/>]</log>
            <assign name="inVXML" expr="'n'"/>
            <if cond="((evt.values.status == 'Failure') || (evt.values.result == 'true'))">
                <send data="'dialog.user.call'" target="session.id"/>
               <!-- <if cond="((tmpDNIS &lt; EXT_LENGTH) &amp;&amp; (ip.length == 0))">
                     Assume this is a pbx call. Get the IP address associated with DNIS 
                    <assign name="state" expr="'getIP'"/>
          	   		<dialogstart src="'file:'+TRANS_PATH+'getCallerID.vxml'" namelist="tmpDNIS importedValue"/>
                <else/>
                    <send data="'dialog.user.call'" target="session.id"/>
                </if>  -->
            <else/>
                <log target="status">[<value expr="tmpDNIS"/>] not permitted</log>
                <log>INFO: [<value expr="ANI"/>] not permitted to dial [<value expr="tmpDNIS"/>]</log>
                <var name="logText" expr="'dial.ccxml: Caller ['+ tmpANI +'] attempted to dial blacklisted destination ['+ tmpDNIS + ']'"/>
                <assign name="logText" expr="writeLog('DIAL',LINE_NUMBER,logText)"/>
                <log target="logFile"><value expr="logText"/></log>
                <assign name="state" expr="'blackListNum'"/>
                <var name="II_SB_repeat" expr="'n'"/>
                <var name="II_SB_interval" expr="''"/>
                <assign name="II_SB_promptID" expr="AUDIO_PATH+'blackListNum.00.wav'"/>
                <dialogstart src="'file:'+LIB_PATH+'audioPlayBack.vxml'" namelist="II_SB_promptID II_SB_repeat II_SB_interval"/>
            </if>
        </transition>

        <transition state="blackListNum" event="dialog.exit">
            <!-- We've informed the caller that the number they tried to reach is blocked -->
            <log>INFO: Entered [dialog.exit] with state [<value expr="state"/>]</log>
            <assign name="inVXML" expr="'n'"/>
            <if cond="returnApp.length &gt; 0"> <!-- Dial request originated from different listen app. Return to it -->
                <assign name="LISTEN_APP" expr="returnApp"/>
                <assign name="callResult" expr="'Number Black Listed'"/>
            	<assign name="importedValue" expr="extendJsonObject(importedValue, 'callResult', callResult)"/>
            	<assign name="importedValue" expr="extendJsonObject(importedValue, 'callTime', '')"/>
            	<assign name="importedValue" expr="extendJsonObject(importedValue, 'callType', callType)"/>
                <send data="'dialog.user.listenApp'" target="session.id"/>
            <else/>
                <var name="dltAniRecord" expr="'true'"/>
                <var name="dltDnisRecord" expr="'false'"/>
                <assign name="callResult" expr="callResult + ': ' + tmpDNIS +' is Black Listed'"/>
                <send data="'dialog.user.deleteRecord'" target="session.id" namelist="dltAniRecord dltDnisRecord"/>
            </if>
        </transition>

     <!--   <transition state="getIP" event="dialog.exit" name="evt">
              Back from getting destination IP address
            <log>INFO: Entered [dialog.exit] with state [<value expr="state"/>]</log>
            <assign name="inVXML" expr="'n'"/>
            <var name="result" expr="evt.values.result"/>
            <assign name="ip" expr="getResultsKeyValue(result, 0, 'ip')"/>
            <send data="'dialog.user.call'" target="session.id"/>
        </transition>   -->

        <transition event="dialog.user.findMe" name="evt">
            <!-- This transition handles the findMe dialing logic. We'll loop through the user's findMe configuration and 
            dial any enabled numbers -->
            <log>INFO: Entered [dialog.user.findMe] with state [<value expr="state"/>]</log>
            <assign name="state" expr="'findMe'"/>
            <if cond="fmGrpIndex &lt; fmGrpCnt">    <!-- Get next number in a current group -->
                <var name="enabled" expr="getFindMeConfiguartion(findMeConfiguration, fmConfigIndex, fmGrpIndex, 'enabled')"/>
                <if cond="enabled">
                    <var name="tmpDNIS" expr="getFindMeConfiguartion(findMeConfiguration, fmConfigIndex, fmGrpIndex, 'number')"/>
                    <var name="TIME_OUT" expr="getFindMeConfiguartion(findMeConfiguration, fmConfigIndex, fmGrpIndex, 'duration')"/>
                    <!-- Call dial transition here -->
                    <send data="'dialog.user.call'" target="session.id"/>
                </if>
                <assign name="fmGrpIndex" expr="fmGrpIndex + 1"/>
                <send data="'dialog.user.findMe'" target="session.id"/> <!-- Loop -->
            <else/>
                <!-- Done with numbers in find me group. Possibly have multiple calls going on. If they all time out, 
                we'll get a connection.failed for all of them and start dialing the next group. If any is answered, we'll
                terminate the other calls. Here we send a stat for this find me group -->
                <var name="id" expr="'LSTNAPP_0036'"/>
                <var name="source" expr="'findMe'"/>
                <var name="operation" expr="'increment'"/>
                <var name="value" expr="'1'"/>
                <send data="'statInfo'" target="getJsonVal(importedValue,'STATcontroller')" targettype="'basichttp'" namelist="id source value operation"/>
            </if>
        </transition>

        <transition event="dialog.user.call" name="evt">
            <!-- Attempt dial to destination number. Since this is voip, we'll generate
            ring tone to the caller. Once call gets picked up, we'll end it (the ring tone). -->
            <log>INFO: Entered [dialog.user.call] with state [<value expr="state"/>]</log>
            <var name="OBCALL.noproxy" expr="'false'"/>
            <if cond="((tmpANI.length &lt; EXT_LENGTH) &amp;&amp; ((tmpDNIS.length &lt; EXT_LENGTH) || (inString('*',tmpDNIS,''))))">
                <assign name="CALL_ANI" expr="'sip:' + getJsonVal(importedValue, 'sipFrom') + getJsonVal(importedValue, 'EXT_SUFFIX')"/>
            <else/>
                <assign name="CALL_ANI" expr="setANI(ANI)"/>
            </if>
            <if cond="tmpDNIS.length &lt; EXT_LENGTH"> <!-- Call to a PBX extension -->
                <if cond="ip.length &gt; 0">
                    <assign name="CALL_DNIS" expr="'sip:' + getJsonVal(importedValue, 'EXT_PREFIX') + tmpDNIS + '@' + ip"/>
                <else/>
                    <assign name="CALL_DNIS" expr="'sip:' + getJsonVal(importedValue, 'EXT_PREFIX') + tmpDNIS + getJsonVal(importedValue, 'EXT_SUFFIX')"/>
                </if>
            <else/> <!-- Call to an external number (outside PBX) -->
                <if cond="state != 'findMe'">
                    <assign name="TIME_OUT" expr="'60'"/>  <!-- Set time out for external non-findme calls -->
                </if>
                <if cond="iiNumber(tmpDNIS)">  <!-- Assume we are attempting to reach a pstn number through SIP Trunk -->
                    <if cond="((tmpDNIS[0] == OUTSIDE_LINE) &amp;&amp; (state != 'findMe'))">
                        <assign name="tmpDNIS" expr="iiSubstr(tmpDNIS,1,-1)"/>  <!-- Strip off outside line prefix -->
                    </if>
                    <assign name="SIP_SERVER" expr="getJsonVal(importedValue, 'sipURL')"/>
                    <assign name="CALL_DNIS" expr="'sip:' + tmpDNIS + '@' + SIP_SERVER"/>
                <elseif cond="(inString('*',tmpDNIS,'')) || (inString('.',tmpDNIS,''))"/>   <!-- Check if destination is an IP address -->
                    <assign name="OBCALL.noproxy" expr="'true'"/>
                    <if cond="inString('*',tmpDNIS,'')">
                        <assign name="tmpDNIS" expr="iiReplace(tmpDNIS,'*','.')"/>  <!-- If so, replace '*' with '.' -->
                    </if>
                    <assign name="CALL_DNIS" expr="'sip:' + tmpDNIS"/>
                <else/> <!-- Invalid outdial attempt -->
                    <assign name="CALL_DNIS" expr="''"/>
                </if>
            </if>
            <if cond="CALL_DNIS.length &gt; 0">
                <createcall connectionid="obconnid" dest="CALL_DNIS" callerid="CALL_ANI" hints="OBCALL" timeout="TIME_OUT + 's'"/>
                <if cond="state == 'findMe'">
                    <var name="id" expr="'LSTNAPP_0032'"/>
                    <assign name="findMeIDList" expr="findMeIDList + obconnid + '|'"/>
                    <assign name="findMeObj" expr="extendJsonObject(findMeObj, obconnid, tmpDNIS)"/>
                    <log>INFO: Find Me Obj [<value expr="findMeObj"/>]</log>
                    <log target="status">Finding [<value expr="getExtID(DNIS)"/>]</log>
                    <if cond="tmpDNIS.length &lt; EXT_LENGTH">
                        <!-- Stat ID already set above -->
                    <elseif cond="inString('.',tmpDNIS,'')"/>
                        <assign name="id" expr="'LSTNAPP_0037'"/> <!-- IP Stat ID -->
                    <else/>
                        <assign name="id" expr="'LSTNAPP_0033'"/> <!-- External Stat ID -->
                    </if>
                    <var name="source" expr="'findMe'"/>
                    <var name="operation" expr="'increment'"/>
                    <var name="value" expr="'1'"/>
                    <send data="'statInfo'" target="getJsonVal(importedValue,'STATcontroller')" targettype="'basichttp'" namelist="id source value operation"/>
                <else/>
                    <assign name="state" expr="'dialing'"/>
                    <log target="status">Dialing [<value expr="tmpDNIS"/>]</log>
                </if>
                <if cond="((tmpDNIS.length &lt; EXT_LENGTH) || (state == 'findMe'))">
                    <if cond="tmpDNIS.length &lt; EXT_LENGTH">
                        <!-- Internal call. Need to store session information in pbx database. 
                        This allows another party to pick up ringing call -->
                        <var name="extension" expr="tmpDNIS"/>
                        <var name="id" expr="obconnid"/>
                        <var name="sessionID" expr="session.id"/>
                        <var name="flag" expr="'insert'"/>
                        <send data="'updateClient'" target="DB_PATH+'activeClients.php'" targettype="'basichttp'" namelist="extension id flag sessionID maxTime"/>
                    </if>
                    <send data="'dialog.user.ringTone'" target="session.id"/> <!-- Play ring tone -->
                </if>
            <else/>
                <var name="logText" expr="'dial.ccxml: Invalid outdial attempt. Caller ['+ tmpANI +'] attempted to dial destination ['+ tmpDNIS + ']'"/>
                <assign name="logText" expr="writeLog('DIAL',LINE_NUMBER,logText)"/>
                <log target="logFile"><value expr="logText"/></log>
                <if cond="state != 'findMe'">
                    <assign name="state" expr="'hangUp'"/>
                    <var name="dltAniRecord" expr="'true'"/>
                    <var name="dltDnisRecord" expr="'false'"/>
                    <assign name="callResult" expr="callResult + ': Invalid destination ' + tmpDNIS"/>
                    <send data="'dialog.user.deleteRecord'" target="session.id" namelist="dltAniRecord dltDnisRecord"/>
                <else/>
                    <!-- Nothing to do here. App will automatically get next find me number -->
                </if>
            </if>
        </transition>

		<transition state="dialing findMe" event="dialog.user.ringTone" name="evt" cond="playRingTone == 'y'">
            <!-- Here, we start up a vxml dialog to play a ring tone to the caller. We'll use a condition to make sure this
            only happens once for a find me call -->
            <log>INFO: Entered [dialog.user.ringTone] with state [<value expr="state"/>]</log>
            <assign name="II_SB_promptID" expr="AUDIO_PATH+'ring'+'.00'+'.wav'"/> <!-- Play ringing tone -->
            <var name="II_SB_repeat" expr="'y'"/>
            <assign name="playRingTone" expr="'n'"/>    <!-- This is a flag for find me logic -->
            <var name="II_SB_interval" expr="'2000'"/>  <!-- Number of milliseconds repeat -->
            <dialogstart dialogid="ringToneID" src="'file:'+LIB_PATH+'audioPlayBack.vxml'" namelist="II_SB_promptID II_SB_repeat II_SB_interval"/>
		</transition>

        <transition event="dialog.started" name="evt">
            <!-- Save off ID of VXML dialog that was started -->
            <log>INFO: Entered [dialog.started] with state [<value expr="state"/>]</log>
            <assign name="dialogID" expr="evt.dialogid"/>
            <assign name="inVXML" expr="'y'"/>
        </transition>

		<transition event="connection.progressing" name="evt" cond="((state != 'findMe') &amp;&amp; (tmpDNIS.length &gt; EXT_LENGTH))">
            <!-- For external calls (that are not find me), we want to join connections in this transition. This allows caller to
            hear any telco carrier messages -->
            <log>INFO: Entered [connection.progressing] with state [<value expr="state"/>]</log>
            <assign name="state" expr="'progressing'"/>
            <log target="status">Ringing...</log>
		    <join id1="ibconnid" id2="evt.connectionid"/>
		</transition>

		<transition state="progressing" event="conference.joined" name="evt">
            <!-- Our join attempt was successful. Wait for next event -->
            <log>INFO: Entered [conference.joined] with state [<value expr="state"/>]</log>
		</transition>

		<transition event="connection.connected" name="evt">
            <!-- The dial attempt was successful. Let's terminate the ring tone on the caller's side (if neccessary)-->
            <log>INFO: Entered [connection.connected] with state [<value expr="state"/>]</log>
            <assign name="callResult" expr="'Call Answered'"/>
            <assign name="startTime" expr="getTimeStamp(3)"/>
            <if cond="inVXML == 'y'">
                <send data="'dialog.user.terminate'" target="session.id"/>
            </if>
            <if cond="state == 'progressing'"> <!-- Go monitor call -->
                <send data="'dialog.user.keyPress'" target="session.id" delay="'250ms'"/>
            <elseif cond="state == 'findMe'"/>
                <assign name="fmGrpCnt" expr="0"/>
                <assign name="fmGrpIndex" expr="0"/>
                <assign name="obconnid" expr="evt.connectionid"/>
                <assign name="tmpDNIS" expr="getExtID(DNIS)"/> <!-- Reset tmp dnis info -->
                <assign name="findMeIDList" expr="shrink(evt.connectionid,findMeIDList,'|')"/>
                <assign name="callResult" expr="'Find Me: ' + callResult + ' at ' + getJsonVal(findMeObj, evt.connectionid)"/>
                <var name="id" expr="'LSTNAPP_0030'"/>
                <var name="source" expr="'findMe'"/>
                <var name="operation" expr="'set'"/>
                <var name="value" expr="getTimeDifference(startTime,endTime)"/>
                <send data="'statInfo'" target="getJsonVal(importedValue,'STATcontroller')" targettype="'basichttp'" namelist="id source value operation"/>
                <assign name="id" expr="'LSTNAPP_0035'"/>
                <assign name="operation" expr="'increment'"/>
                <assign name="value" expr="'1'"/>
                <send data="'statInfo'" target="getJsonVal(importedValue,'STATcontroller')" targettype="'basichttp'" namelist="id source value operation"/>
                <if cond="findMeIDList.length &gt; 1">
                    <!-- There are some active calls to terminate -->
                    <send data="'dialog.user.stopFindMe'" target="session.id"/>
                <else/>
      		        <assign name="state" expr="'callConnected'"/>
                    <send data="'dialog.user.joinID'" target="session.id" delay="'250ms'"/>
                </if>
            <else/>
    		    <assign name="state" expr="'callConnected'"/>
                <send data="'dialog.user.joinID'" target="session.id" delay="'250ms'"/>
            </if>
            <var name="resource" expr="'startCall'"/>   <!-- Send call start time info to controller -->
            <var name="params" expr="callInfoParams(session.id, tmpANI, tmpDNIS)"/>
            <send data="'dialog.user.callInfo'" target="session.id" namelist="params resource"/>
		</transition>

		<transition event="dialog.user.stopFindMe" name="evt">
            <!-- Here we stop all other find me calls -->
            <log>INFO: Entered [dialog.user.stopFindMe] with state [<value expr="state"/>]</log>
  		    <assign name="state" expr="'stopFindMe'"/>
            <var name="callID" expr="getNextElement(fmGrpIndex,findMeIDList,'|')"/>
            <if cond="callID == -1">
                <!-- No more IDs to disconnect -->
            <elseif cond="iiNumber(callID)"/>
                <disconnect connectionid="callID"/> <!-- This will generate a connection.failed or connection.disconnected -->
                <assign name="fmGrpIndex" expr="fmGrpIndex + 1"/>
                <send data="'dialog.user.stopFindMe'" target="session.id"/>
            <else/> <!-- We pulled an empty record. Get next one -->
                <assign name="fmGrpIndex" expr="fmGrpIndex + 1"/>
                <assign name="fmGrpCnt" expr="fmGrpCnt + 1"/>
                <send data="'dialog.user.stopFindMe'" target="session.id"/>
            </if>
		</transition>

        <transition state="stopFindMe" event="connection.failed" name="evt">
            <!-- Ended findMe call. Wait till we get all disconnects -->
            <log>INFO: Entered [connection.failed] with state [<value expr="state"/>]</log>
            <assign name="fmGrpCnt" expr="fmGrpCnt + 1"/>
            <log>INFO: Stop find me cnt [<value expr="fmGrpCnt"/>]</log>
            <log>INFO: Stop find index [<value expr="fmGrpIndex"/>]</log>
            <if cond="fmGrpCnt == fmGrpIndex">
      		    <assign name="state" expr="'callConnected'"/>
                <send data="'dialog.user.joinID'" target="session.id"/>
            </if>
		</transition>

        <transition state="stopFindMe" event="connection.disconnected" name="evt">
            <!-- Ended findMe call -->
            <log>INFO: Entered [connection.disconnected] with state [<value expr="state"/>]</log>
            <assign name="fmGrpCnt" expr="fmGrpCnt + 1"/>
            <if cond="fmGrpCnt == fmGrpIndex">
      		    <assign name="state" expr="'callConnected'"/>
                <send data="'dialog.user.joinID'" target="session.id"/>
            </if>
		</transition>

		<transition state="callConnected" event="dialog.user.joinID" name="evt">
            <!-- Here, we start up a vxml dialog to play a ring tone to the caller -->
            <log>INFO: Entered [dialog.user.joinID] with state [<value expr="state"/>]</log>
	    	<log>INFO: Joining call legs</log>
            <log>INFO: ibconnid [<value expr="ibconnid"/>]</log>
            <log>INFO: obconnid [<value expr="obconnid"/>]</log>
		    <join id1="ibconnid" id2="obconnid"/>
        </transition>

		<transition state="callConnected" event="conference.joined" name="evt">
            <!-- Our join attempt was successful -->
            <log>INFO: Entered [conference.joined] with state [<value expr="state"/>]</log>
            <log>INFO: Call in progress...</log>
            <log target="status"><value expr="tmpDNIS"/></log>
            <if cond="tmpDNIS.length &lt; EXT_LENGTH"> <!-- If Called party is internal, we need to update a record into the db -->
                <var name="id" expr="obconnid"/>
                <var name="sessionID" expr="''"/>
                <var name="flag" expr="'update'"/>
                <var name="extension" expr="tmpDNIS"/>
                <send data="'updateClient'" target="DB_PATH+'activeClients.php'" targettype="'basichttp'" namelist="extension id flag sessionID maxTime"/>
            </if>
            <send data="'dialog.user.keyPress'" target="session.id" delay="'250ms'"/>
		</transition>

		<transition state="callConnected progressing" event="dialog.user.keyPress" name="evt">
            <!-- In here, we determin which connection ID we're going to monitor for key presses -->
            <log>INFO: Entered [dialog.user.keyPress] with state [<value expr="state"/>]</log>
            <assign name="state" expr="'keyPress'"/>
            <var name="id" expr="getJsonVal(importedValue, 'dialInterrupt')"/>
            <if cond="id == 'inbound'">
                <assign name="listenToID" expr="ibconnid"/>
                <join id1="'VXML_CHANNEL'" id2="ibconnid" duplex="'half'"/>
            <else/>
                <assign name="listenToID" expr="obconnid"/>
                <join id1="'VXML_CHANNEL'" id2="obconnid" duplex="'half'"/>
            </if>
		</transition>

		<transition state="keyPress" event="conference.joined" name="evt">
            <!-- Our join attempt was successful -->
            <log>INFO: Entered [conference.joined] with state [<value expr="state"/>]</log>
  		    <assign name="state" expr="'callConnected'"/>
            <!-- Call transition that monitors the call for key presses -->
            <send data="'dialog.user.monitor'" target="session.id"/>
		</transition>

		<transition state="callConnected" event="dialog.user.monitor" name="evt">
            <!-- In here, we start a dialog that will monitor the call for any 4 digit key press -->
            <log>INFO: Entered [dialog.user.monitor] with state [<value expr="state"/>]</log>
            <assign name="state" expr="'monitor'"/>
            <assign name="II_SB_promptID" expr="''"/>
            <var name="FLD_TERMCHAR" expr="'#'"/>
            <var name="II_SB_FLD_INTERRUPT" expr="'true'"/>
            <var name="II_SB_FLD_TIMEOUT" expr="'3600'"/>
            <var name="FLD_LENGTH" expr="''"/>
            <var name="DGT_TIMEOUT" expr="'3s'"/>
            <var name="II_SB_repeat" expr="''"/>
            <var name="II_SB_interval" expr="''"/>
            <assign name="match_key" expr="getJsonVal(importedValue, 'dialHotKeys')"/>
            <dialogstart src="'file:'+LIB_PATH+'audioPlayBack.vxml'" connectionid="listenToID" namelist="match_key FLD_TERMCHAR II_SB_promptID II_SB_repeat II_SB_interval DGT_TIMEOUT FLD_LENGTH II_SB_FLD_TIMEOUT II_SB_FLD_INTERRUPT"/>
		</transition>

        <transition state="monitor" event="dialog.exit" name="evt">
            <!-- Back from monitor dialog -->
            <log>INFO: Entered [dialog.exit] with state [<value expr="state"/>]</log>
            <assign name="inVXML" expr="'n'"/>
            <assign name="userEntry" expr="evt.values.userEntry"/>
            <if cond="returnApp.length &gt; 0">
                <if cond="userEntry == match_key">
                    <assign name="LISTEN_APP" expr="returnApp"/>
                    <assign name="endTime" expr="getTimeStamp(3)"/>
                    <var name="callTime" expr="getTimeDifference(startTime,endTime)"/>
            	    <assign name="importedValue" expr="extendJsonObject(importedValue, 'callTime', callTime)"/>
            	    <assign name="importedValue" expr="extendJsonObject(importedValue, 'callType', callType)"/>
            	    <assign name="importedValue" expr="extendJsonObject(importedValue, 'keyPress', userEntry)"/>
            	    <assign name="importedValue" expr="extendJsonObject(importedValue, 'outBoundID', obconnid)"/>
            	    <assign name="importedValue" expr="extendJsonObject(importedValue, 'callResult', callResult)"/>
                    <send data="'dialog.user.listenApp'" target="session.id"/>
                <else/>
                    <log>INFO: Invalid short code [<value expr="code"/>]</log>
    		        <assign name="state" expr="'callConnected'"/>
                    <send data="'dialog.user.monitor'" target="session.id"/>
                </if>
            <else/>
                <assign name="code" expr="userEntry[0] + userEntry[1]"/>
                <if cond="code == SHORT_CODE">
                    <assign name="code" expr="userEntry[2]"/>
                    <assign name="userEntry" expr="iiSubstr(userEntry,3,-1)"/>
                    <send data="'dialog.user.chkCode'" target="session.id"/>
                <else/>
                    <log>INFO: Invalid short code [<value expr="code"/>]</log>
    		        <assign name="state" expr="'callConnected'"/>
                    <send data="'dialog.user.monitor'" target="session.id"/>
                </if>
            </if>
        </transition>

		<transition state="monitor" event="dialog.user.chkCode" name="evt">
            <!-- Checks user's short code key press -->
            <log>INFO: Entered [dialog.user.chkCode] with state [<value expr="state"/>]</log>
            <if cond="((code == VOICEMAIL_XFER) &amp;&amp; (userEntry.length &gt; 0) &amp;&amp; (userEntry.length &lt; EXT_LENGTH))">
                <assign name="state" expr="'xferToVoiceMail'"/>
                <assign name="origDNIS" expr="''"/>
                <log>INFO: Transfer [<value expr="tmpANI"/>] to voicemail box [<value expr="userEntry"/>]</log>
                <disconnect connectionid="obconnid"/>
            <elseif cond="((code == BLIND_XFER) &amp;&amp; (userEntry.length &gt; 0))"/>
                <log>INFO: Blind Transfer [<value expr="tmpANI"/>] to [<value expr="userEntry"/>]</log>
                <log target="status">Blind transfer request</log>
                <assign name="state" expr="'blindXfer'"/>
                <assign name="xferConnID" expr="obconnid"/>
                <assign name="URI" expr="userEntry"/>
                <send data="'dialog.user.blindXfer'" target="session.id"/>
            <else/>
                <log>INFO: Invalid short code [<value expr="code"/>]</log>
    		    <assign name="state" expr="'callConnected'"/>
                <send data="'dialog.user.monitor'" target="session.id"/>
            </if>
		</transition>

        <transition state="xferToVoiceMail" event="connection.disconnected" name="evt" cond="evt.connectionid == obconnid">
            <!-- We've received the disconnect event -->
            <log>INFO: Entered [connection.disconnected] with state [<value expr="state"/>]</log>
            <!-- Send end call status to controller -->
            <var name="params" expr="callInfoParams(session.id, '', '')"/>
            <var name="resource" expr="'endCall'"/>
            <send data="'dialog.user.callInfo'" target="session.id" namelist="params resource"/>
            <if cond="tmpDNIS.length &lt; EXT_LENGTH">
                <!-- Let's remove the disconnected party's info from the active clients table -->
                <var name="id" expr="obconnid"/>
                <var name="sessionID" expr="''"/>
                <var name="flag" expr="'delete'"/>
                <var name="extension" expr="tmpDNIS"/>
                <send data="'updateClient'" target="DB_PATH+'activeClients.php'" targettype="'basichttp'" namelist="extension id flag sessionID maxTime"/>
            </if>
            <assign name="endTime" expr="getTimeStamp(3)"/>
            <assign name="callResult" expr="callResult + ': Transferred to mailbox ' + userEntry"/>
            <send data="'dialog.user.writeCDR'" target="session.id"/> <!-- Write CDR of call -->
            <assign name="DNIS" expr="userEntry"/>
            <assign name="LISTEN_APP" expr="'listen_voicemail'"/>   <!-- Transfer to voicemail application -->
            <send data="'dialog.user.listenApp'" target="session.id" delay="'250ms'"/>
        </transition>

		<transition event="blindtransferrequest" name="evt">
            <!-- Blind Transfer request. Call the transfer script -->
            <log>INFO: Entered [blindtransferrequest] with state [<value expr="state"/>]</log>
            <log target="status">Blind transfer request</log>
            <assign name="state" expr="'blindXfer'"/>
            <assign name="xferConnID" expr="evt.connectionid"/>
            <assign name="URI" expr="evt.uri"/>
            <if cond="inVXML == 'y'">   <!-- If we're in a vxml dialog, we need to end it -->
                <send data="'dialog.user.terminate'" target="session.id"/>
            </if>
            <send data="'dialog.user.blindXfer'" target="session.id" delay="'250ms'"/>
		</transition>

		<transition state="blindXfer" event="dialog.user.blindXfer" name="evt">
            <!-- Blind Transfer request. Call the transfer script -->
            <log>INFO: Entered [dialog.user.blindXfer] with state [<value expr="state"/>]</log>
            <fetch next="'file:'+APP_PATH+'transfer/blindTransfer.ccxml'" namelist="APP_PATH SB_PATH EXT_LENGTH origDNIS tmpDNIS DNIS tmpANI ANI callType ibconnid obconnid importedValue URI xferConnID startTime endTime II_SB_VXML_LIB II_SB_status II_SB_local II_SB_remote II_SB_originator II_SB_protocol II_SB_connectionID II_SB_type II_SB_ibcallid II_SB_transfer II_SB_projectSource II_SB_obcallid II_SB_CODE_DIR II_SB_line II_SB_importedValue"/>
		</transition>

		<transition state="monitor" event="connection.signal" name="evt">
    		<!-- Got a hold request. Call the hold script -->
            <log>INFO: Entered [connection.signal] with state [<value expr="state"/>]</log>
            <assign name="requestID" expr="evt.connectionid"/>
            <assign name="state" expr="'gotSignal'"/>
            <assign name="voipDirection" expr="evt.info.voip.direction"/>
            <if cond="inVXML == 'y'">   <!-- If we're in a vxml dialog, we need to end it -->
                <send data="'dialog.user.terminate'" target="session.id"/>
            </if>
            <send data="'dialog.user.connectionSignal'" target="session.id" delay="'250ms'"/>
		</transition>

        <transition state="gotSignal" event="dialog.user.connectionSignal" name="evt">
    		<!-- Got a hold request. Call the hold script -->
            <log>INFO: Entered [dialog.user.connectionSignal] with state [<value expr="state"/>]</log>
            <if cond="voipDirection == 'sendrecv'">
                <!-- Here, we assume this event is in connection to a 3-way call/conference. 
                We'll ignore it and allow the IP phone handle the call -->
            <else/>
                <fetch next="'file:'+APP_PATH+'transfer/hold.ccxml'" namelist="APP_PATH SB_PATH EXT_LENGTH origDNIS tmpDNIS DNIS tmpANI ANI callType ibconnid obconnid requestID importedValue startTime endTime II_SB_VXML_LIB II_SB_status II_SB_local II_SB_remote II_SB_originator II_SB_protocol II_SB_connectionID II_SB_type II_SB_ibcallid II_SB_transfer II_SB_projectSource II_SB_obcallid II_SB_CODE_DIR II_SB_line II_SB_importedValue"/>
            </if>
		</transition>

        <transition state="dialing monitor gotSignal" event="dialog.user.moveRequest" name="evt">
            <!-- In here, we're in the process of doing an attended transfer or a "ringing call pick up" -->
            <log>INFO: Entered [dialog.user.moveRequest] with state [<value expr="state"/>]</log>
            <if cond="state == 'dialing'">
                <assign name="state" expr="'attemptRingPickUp'"/>
            <else/>
                <assign name="state" expr="'attemptMove'"/>
            </if>
            <assign name="requestToID" expr="evt.requestToID"/>
            <assign name="requestFromID" expr="evt.requestFromID"/>
            <assign name="moveRequestSID" expr="evt.moveRequestSID"/>
            <if cond="inVXML == 'y'">   <!-- If we're in a vxml dialog, we need to end it -->
                <send data="'dialog.user.terminate'" target="session.id"/>
            </if>
            <send data="'dialog.user.moveRequestContinue'" target="session.id" delay="'250ms'"/>
        </transition>

        <transition state="attemptRingPickUp attemptMove" event="dialog.user.moveRequestContinue" name="evt">
            <!-- In here, we're in the process of doing an attended transfer or a "ringing call pick up" -->
            <if cond="state == 'attemptMove'"> <!-- This is for attenden transfer. First, we'll unjoin the current call -->
                <assign name="state" expr="'xferUnjoin'"/>
                <unjoin id1="ibconnid" id2="obconnid"/> <!-- End current call -->
                <var name="resource" expr="'endCall'"/>
                <assign name="endTime" expr="getTimeStamp(3)"/>
                <var name="params" expr="callInfoParams(session.id, '', '')"/>
                <send data="'dialog.user.callInfo'" target="session.id" namelist="params resource"/>
            <else/> <!-- This is for ringing pick up. Here, we disconnect our dial attempt -->
                <assign name="state" expr="'ringPickUpDisc'"/>
                <disconnect connectionid="obconnid"/>
            </if>
		</transition>

        <transition state="xferUnjoin" event="conference.unjoined" name="evt">
            <!-- We've unjoined the parties. Next, we'll disconnect the caller; since they are the ones
            attempting the transfer -->
            <log>INFO: Entered [conference.unjoined] with state [<value expr="state"/>]</log>
		    <assign name="state" expr="'attdXferMoveDisc'"/>
            <disconnect connectionid="ibconnid"/>
        </transition>

        <transition state="xferUnjoin" event="error.conference.unjoined" name="evt">
            <!-- Got an error when attempting to unjoin calling parties -->
            <log>INFO: Entered [error.conference.unjoined] with state [<value expr="state"/>]</log>
            <send data="'dialog.user.moveFailed'" target="moveRequestSID" namelist="obconnid"/> <!-- Notify other session involved in the move that there's a problem -->
            <assign name="state" expr="'hangUp'"/>
            <!-- Remove the records associated with this call in the db prior to exiting -->
            <var name="logText" expr="'dial.ccxml: Error while attempting to perform call transfer. Unable to unjoin ['+ tmpANI +'] from ['+ tmpDNIS + ']. Reason [evt.reason]'"/>
            <assign name="logText" expr="writeLog('DIAL',LINE_NUMBER,logText)"/>
            <log target="logFile"><value expr="logText"/></log>
            <var name="dltAniRecord" expr="'true'"/>
            <var name="dltDnisRecord" expr="'true'"/>
            <assign name="callResult" expr="callResult + ': Transfer to ' + requestFromID + ' failed'"/>
            <send data="'dialog.user.deleteRecord'" target="session.id" namelist="dltAniRecord dltDnisRecord"/>
        </transition>

        <transition state="attdXferMoveDisc" event="connection.disconnected" name="evt" cond="evt.connectionid == ibconnid">
            <!-- Got the disconnect -->
            <log>INFO: Entered [connection.disconnected] with state [<value expr="state"/>]</log>
            <!-- Remove the caller's record in the db -->
            <if cond="tmpANI.length &lt; EXT_LENGTH">
                <var name="id" expr="ibconnid"/>
                <var name="sessionID" expr="''"/>
                <var name="flag" expr="'delete'"/>
                <var name="extension" expr="tmpANI"/>
                <send data="'updateClient'" target="DB_PATH+'activeClients.php'" targettype="'basichttp'" namelist="extension id flag sessionID maxTime"/>
            </if>
		    <assign name="state" expr="'attdXferVChnnel'"/>
            <join id1="obconnid" id2="'VXML_CHANNEL'"/>
        </transition>

        <transition state="attdXferMoveDisc" event="connection.failed" name="evt" cond="evt.connectionid == ibconnid">
            <!-- Our disconnect attempt failed. Remove the caller's record in the db -->
            <log>INFO: Entered [connection.failed] with state [<value expr="state"/>]</log>
            <var name="logText" expr="'dial.ccxml: Error while attempting to disconnect [tmpANI] during a call transfer. Reason [evt.reason]'"/>
            <assign name="logText" expr="writeLog('DIAL',LINE_NUMBER,logText)"/>
            <log target="logFile"><value expr="logText"/></log>
            <!-- Remove the caller's record in the db -->
            <if cond="tmpANI.length &lt; EXT_LENGTH">
                <var name="id" expr="ibconnid"/>
                <var name="sessionID" expr="''"/>
                <var name="flag" expr="'delete'"/>
                <var name="extension" expr="tmpANI"/>
                <send data="'updateClient'" target="DB_PATH+'activeClients.php'" targettype="'basichttp'" namelist="extension id flag sessionID maxTime"/>
            </if>
		    <assign name="state" expr="'attdXferVChnnel'"/>
            <join id1="obconnid" id2="'VXML_CHANNEL'"/>
        </transition>

        <transition state="ringPickUpDisc" event="connection.failed" name="evt" cond="evt.connectionid == obconnid">
            <!-- Got the response to our disconnect. Remove the callee's record in the db -->
            <log>INFO: Entered [connection.failed] with state [<value expr="state"/>]</log>
            <if cond="tmpDNIS.length &lt; EXT_LENGTH">
                <var name="id" expr="obconnid"/>
                <var name="sessionID" expr="''"/>
                <var name="flag" expr="'delete'"/>
                <var name="extension" expr="tmpDNIS"/>
                <send data="'updateClient'" target="DB_PATH+'activeClients.php'" targettype="'basichttp'" namelist="extension id flag sessionID maxTime"/>
            </if>
		    <assign name="state" expr="'pickUpVChnnel'"/>
            <join id1="ibconnid" id2="'VXML_CHANNEL'"/>
        </transition>

        <transition state="pickUpVChnnel attdXferVChnnel" event="conference.joined" name="evt">
            <!-- We're joined to a voice channel. Let's continue with the transfer/pickup. Need to move this
            call to the appropriate location -->
            <log>INFO: Entered [conference.joined] with state [<value expr="state"/>]</log>
            <if cond="state == 'attdXferVChnnel'">
		        <assign name="state" expr="'attdXferMoveAttempt'"/>
                <move source="obconnid" sessionid="moveRequestSID"/>
            <else/>
		        <assign name="state" expr="'pickUpMoveAttempt'"/>
                <move source="ibconnid" sessionid="moveRequestSID"/>
            </if>
        </transition>

        <transition state="pickUpVChnnel attdXferVChnnel" event="error.conference.joined" name="evt">
            <!-- Our join attempt was unsucessful. Write a log and end this call -->
            <log>INFO: Entered [error.conference.joined] with state [<value expr="state"/>]</log>
            <var name="dltAniRecord" expr="'false'"/>
            <var name="dltDnisRecord" expr="'false'"/>
            <send data="'dialog.user.moveFailed'" target="moveRequestSID"/>
            <if cond="state == 'attdXferVChnnel'">
                <assign name="dltDnisRecord" expr="'true'"/>
                <assign name="callResult" expr="callResult + ': Attended transfer to: ' + requestFromID + ' failed'"/>
            <else/>
                <assign name="dltAniRecord" expr="'true'"/>
                <assign name="callResult" expr="'Call pick up from: ' + requestFromID + ' failed'"/>
            </if>
            <send data="'dialog.user.deleteRecord'" target="session.id" namelist="dltAniRecord dltDnisRecord"/>
        </transition>

        <transition state="pickUpMoveAttempt attdXferMoveAttempt" event="move.successful" name="evt">
            <!-- Looks like our move worked. Let's send control to the attendedTransfer.ccxml or transferHold.ccxml
            script and end this call -->
            <log>INFO: Entered [move.successful] with state [<value expr="state"/>]</log>
            <var name="dltAniRecord" expr="'false'"/>
            <var name="dltDnisRecord" expr="'false'"/>
            <if cond="state == 'attdXferMoveAttempt'">
                <assign name="state" expr="'endCall'"/>
                <assign name="dltDnisRecord" expr="'true'"/>
                <assign name="callResult" expr="callResult + ': Attended transfer to ' + requestFromID + ' successful'"/>
                <send data="'dialog.user.moveSuccessful'" target="moveRequestSID" namelist="obconnid"/>
                <send data="'dialog.user.deleteRecord'" target="session.id" namelist="dltAniRecord dltDnisRecord" delay="'250ms'"/>
            <else/>
                <assign name="dltAniRecord" expr="'true'"/>
                <assign name="callResult" expr="'Call pick up from: ' + requestFromID + ' successful'"/>
                <send data="'dialog.user.moveSuccessful'" target="moveRequestSID" namelist="ibconnid tmpANI"/>
                <send data="'dialog.user.writeCDR'" target="session.id" delay="'250ms'"/>
                <send data="'dialog.user.endCall'" target="session.id" delay="'500ms'"/>
            </if>
        </transition>

        <transition state="pickUpMoveAttempt attdXferMoveAttempt" event="error.move" name="evt">
            <!-- Looks like our move failed. We'll need to end this session and the session controlling the 
            attendedTransfer.ccxml or transferHold.ccxlm script -->
            <log>INFO: Entered [error.move] with state [<value expr="state"/>]</log>
            <var name="dltAniRecord" expr="'false'"/>
            <var name="dltDnisRecord" expr="'false'"/>
            <send data="'dialog.user.moveFailed'" target="moveRequestSID"/>
            <if cond="state == 'attdXferMoveAttempt'">
                <assign name="dltDnisRecord" expr="'true'"/>
                <assign name="callResult" expr="callResult + ': Attended transfer to: ' + requestFromID + ' failed'"/>
            <else/>
                <assign name="dltAniRecord" expr="'true'"/>
                <assign name="callResult" expr="'Call pick up from: ' + requestFromID + ' failed'"/>
            </if>
            <send data="'dialog.user.deleteRecord'" target="session.id" namelist="dltAniRecord dltDnisRecord" delay="'250ms'"/>
        </transition>

		<transition state="callConnected" event="error.conference.join" name="evt">
            <!-- Our join attempt failed -->
            <log>ERROR: Entered [error.conference.join] with state [<value expr="state"/>]</log>
            <var name="logText" expr="'dial.ccxml: Error while attempting to join parties. Caller ['+ tmpANI +'] attempted to dial destination ['+ tmpDNIS + ']'"/>
            <assign name="logText" expr="writeLog('DIAL',LINE_NUMBER,logText)"/>
            <log target="logFile"><value expr="logText"/></log>
            <var name="dltAniRecord" expr="'true'"/>
            <var name="dltDnisRecord" expr="'true'"/>
            <assign name="callResult" expr="'Call Failed'"/>
            <var name="params" expr="callInfoParams(session.id, '', '')"/>
            <var name="resource" expr="'endCall'"/>
            <assign name="endTime" expr="getTimeStamp(3)"/>
            <send data="'dialog.user.callInfo'" target="session.id" namelist="params resource"/>
            <send data="'dialog.user.deleteRecord'" target="session.id" namelist="dltAniRecord dltDnisRecord" delay="'250ms'"/>
		</transition>

        <transition state="findMe" event="connection.failed" name="evt">
            <!-- The out dial attempt failed for some reason -->
            <log>INFO: Entered [connection.failed] with state [<value expr="state"/>]</log>
            <assign name="fmFailedCalls" expr="fmFailedCalls + 1"/>
            <log>INFO: Config Index [<value expr="fmConfigIndex"/>]</log>
            <log>INFO: Config Cnt [<value expr="fmConfigCnt"/>]</log>
            <log>INFO: Group Index [<value expr="fmGrpIndex"/>]</log>
            <log>INFO: Group cnt [<value expr="fmGrpCnt"/>]</log>
            <log>INFO: Failed Call Cnt [<value expr="fmFailedCalls"/>]</log>
            <var name="finalConfigIndex" expr="fmConfigCnt - 1"/>
            <if cond="((fmConfigIndex == finalConfigIndex) &amp;&amp; (fmFailedCalls == fmGrpCnt))">
                <!-- Done with all find me groups. Unable to find party -->
                <assign name="tmpDNIS" expr="getnum(DNIS)"/> <!-- Reset tmp dnis info -->
                <assign name="dialFailReason" expr="evt.reason"/>
           	    <dialogterminate dialogid="ringToneID" immediate="true"/> <!-- Stop ringing tone on caller side -->
                <send data="'dialog.user.callFailed'" target="session.id" delay="'250ms'"/>
            <elseif cond="((fmConfigIndex &lt; finalConfigIndex) &amp;&amp; (fmFailedCalls == fmGrpCnt))"/>
                <!-- Done with current group. Get details of next group (if one exists) -->
                <assign name="fmGrpIndex" expr="0"/>
                <assign name="fmFailedCalls" expr="0"/>
                <assign name="findMeIDList" expr="''"/>
                <assign name="fmConfigIndex" expr="fmConfigIndex + 1"/>
                <assign name="fmGrpCnt" expr="findMeConfigCount(findMeConfiguration,fmConfigIndex)"/>
                <log>INFO: Config Index [<value expr="fmConfigIndex"/>]</log>
                <log>INFO: Config Cnt [<value expr="fmConfigCnt"/>]</log>
                <log>INFO: Group Index [<value expr="fmGrpIndex"/>]</log>
                <log>INFO: Group cnt [<value expr="fmGrpCnt"/>]</log>
                <send data="'dialog.user.findMe'" target="session.id" delay="'250ms'"/>
            <else/>
                <!-- Since this connection failed, remove connectionid from list. We won't need to stop this call if
                another one gets answered -->
                <assign name="findMeIDList" expr="shrink(evt.connectionid,findMeIDList,'|')"/>
            </if>
		</transition>

        <transition event="connection.failed" name="evt">
            <!-- The out dial attempt failed for some reason -->
            <log>INFO: Entered [connection.failed] with state [<value expr="state"/>]</log>
            <assign name="dialFailReason" expr="evt.reason"/>
            <if cond="ringToneID.length &gt; 0">
       	    	<dialogterminate dialogid="ringToneID" immediate="true"/> <!-- Stop ringing tone on caller side -->
            </if>
            <send data="'dialog.user.callFailed'" target="session.id" delay="'250ms'"/>
		</transition>

		<transition event="dialog.user.callFailed" name="evt">
            <log>INFO: Entered [dialog.user.callFailed] with state [<value expr="state"/>]</log>
            <if cond="((dialFailReason == 'DIALTIMEOUT') || (dialFailReason == REQUEST_TIMEOUT))"> <!-- Reached max ring time -->
                <log target="status">Call not answered</log>
                <assign name="callResult" expr="'No Answer'"/>
            <else/>
                <var name="logText" expr="'dial.ccxml: Call failed. Caller ['+ tmpANI +'] attempting to reach destination ['+ tmpDNIS + ']. Reason ['+ errorCode(dialFailReason) +']'"/>
                <assign name="logText" expr="writeLog('DIAL',LINE_NUMBER,logText)"/>
                <log target="logFile"><value expr="logText"/></log>
                <if cond="inString(dialFailReason,ERR_BUSY,',')"> <!-- Destination was busy -->
                    <log target="status">Destination busy</log>
                    <assign name="callResult" expr="'Busy'"/>
                <else/>
                    <!-- Call failed due to some other reason -->
                    <log target="status">Call failed</log>
                    <assign name="callResult" expr="'Call Failed'"/>
                </if>
            </if>
            <if cond="returnApp.length &gt; 0"> <!-- Dial request originated from different listen app. Return to it -->
                <assign name="LISTEN_APP" expr="returnApp"/>
            	<assign name="importedValue" expr="extendJsonObject(importedValue, 'callResult', callResult)"/>
            	<assign name="importedValue" expr="extendJsonObject(importedValue, 'callTime', '')"/>
            	<assign name="importedValue" expr="extendJsonObject(importedValue, 'callType', callType)"/>
                <send data="'dialog.user.listenApp'" target="session.id" delay="'250ms'"/>
            <elseif cond="state == 'findMe'"/>
                <assign name="LISTEN_APP" expr="'listen_voicemail'"/>
                <assign name="callResult" expr="'Find Me Call: ' + callResult"/>
                <send data="'dialog.user.writeCDR'" target="session.id"/>
                <send data="'dialog.user.listenApp'" target="session.id" delay="'250ms'"/>
            <else/>
                <var name="tmp" expr="getExtID(DNIS)"/>
                <if cond="tmp.length &lt; EXT_LENGTH">  <!-- Caller tried to reach an IP PBX extension. Send call to voicemail app -->
                    <assign name="LISTEN_APP" expr="'listen_voicemail'"/>
                    <send data="'dialog.user.writeCDR'" target="session.id"/>
                    <send data="'dialog.user.listenApp'" target="session.id" delay="'250ms'"/>
                <else/>
                    <assign name="state" expr="'callError'"/>
                    <join id1="ibconnid" id2="'VXML_CHANNEL'"/>
                </if>
            </if>
		</transition>

        <transition state="callError" event="conference.joined" name="evt">
            <!-- We're joined to a voice channel. Let's play appropriate prompt for why call failed -->
            <log>INFO: Entered [conference.joined] with state [<value expr="state"/>]</log>
            <assign name="state" expr="'errorEnd'"/>
            <var name="II_SB_repeat" expr="'n'"/>
            <var name="II_SB_interval" expr="''"/> <!-- Number of milliseconds repeat -->
            <if cond="callResult == 'No Answer'">
                <assign name="II_SB_promptID" expr="AUDIO_PATH+'noAnswer.00.wav ' + AUDIO_PATH + 'tryAgainLater.00.wav ' +  AUDIO_PATH+'thankYou.00.wav ' + AUDIO_PATH + 'goodbye.00.wav'"/>
            <else/>
                <assign name="II_SB_promptID" expr="AUDIO_PATH+'callFailed2.00.wav'"/>
            </if>
            <dialogstart src="'file:'+LIB_PATH+'audioPlayBack.vxml'" namelist="II_SB_promptID II_SB_repeat II_SB_interval"/>
        </transition>

		<transition event="attendedtransferrequest" name="evt">
            <!-- Attended Transfer request. If we get this event in here, most likely the originator of a 3-way conference
            call wants to drop out of the call but keep the other parties joined. First we need to get information about the
            call legs that need to be joined. -->
            <log>INFO: Entered [attendedtransferrequest] with state [<value expr="state"/>]</log>
            <log target="status">Attended Transfer Request</log>
            <assign name="state" expr="'gotXferReq'"/>
            <assign name="xferConnID" expr="evt.connectionid"/>
            <assign name="xferSID" expr="evt.newsessionid"/>
            <assign name="URI" expr="evt.uri"/>
            <if cond="inVXML == 'y'">   <!-- If we're in a vxml dialog, we need to end it -->
                <send data="'dialog.user.terminate'" target="session.id"/>
            </if>
            <send data="'dialog.user.transfer'" target="session.id" delay="'250ms'"/>
		</transition>

        <transition state="gotXferReq" event="dialog.user.transfer" name="evt">
            <!-- Here, we call the attended transfer ccxml script that handles joining the call legs -->
            <log>INFO: Entered [dialog.user.transfer] with state [<value expr="state"/>]</log>
            <fetch next="'file:'+APP_PATH+'transfer/attendedTransfer.ccxml'" namelist="APP_PATH SB_PATH EXT_LENGTH tmpDNIS DNIS tmpANI ANI callType ibconnid obconnid importedValue URI xferConnID xferSID startTime endTime II_SB_VXML_LIB II_SB_status II_SB_local II_SB_remote II_SB_originator II_SB_protocol II_SB_connectionID II_SB_type II_SB_ibcallid II_SB_transfer II_SB_projectSource II_SB_obcallid II_SB_CODE_DIR II_SB_line II_SB_importedValue"/>
        </transition>

        <transition event="dialog.user.listenApp" name="evt">
            <!-- Here we'll pass control to the begin ccxml script of the appropriate Listen project -->
            <log>INFO: Entered [dialog.user.listenApp] with state [<value expr="state"/>]</log>
            <if cond="importedValue.length &gt; 0"> <!-- Send call to voicemail app (if controller is up) -->
    	        <var  name="cntrlURL" expr="getJsonVal(importedValue,'cntrlURL')"/>
	            <assign  name="cntrlURL" expr="changeSuffix(cntrlURL,'/','api')"/>
            	<assign name="importedValue" expr="extendJsonObject(importedValue, 'cntrlURL', cntrlURL)"/>
                <if cond="LISTEN_APP == 'listen_voicemail'">
                    <if cond="((origDNIS != undefined) &amp;&amp; (origDNIS.length &gt; 0) &amp;&amp; (isFwd == 'true'))">
                    <!-- If we're dealing with an extension that was forwarded, we need to use the original
                    voicemail not where the call was forwarded to -->
                    <assign name="DNIS" expr="origDNIS"/>
                    </if>
                </if>            
                <assign name="II_SB_status" expr="''"/>
                <assign name="II_SB_transfer" expr="'yes'"/>
                <assign name="II_SB_obcallid" expr="obconnid"/>
                <var name="II_SB_importedValue" expr="importedValue"/>
                <fetch next="'file:'+SB_PATH+LISTEN_APP+'/begin.ccxml'" namelist="II_SB_VXML_LIB II_SB_status II_SB_local II_SB_remote II_SB_originator II_SB_protocol II_SB_connectionID II_SB_type II_SB_ibcallid II_SB_transfer II_SB_projectSource II_SB_obcallid II_SB_CODE_DIR II_SB_line II_SB_importedValue"/>
            <else/>
                <!-- Play service error prompts -->
                <assign name="state" expr="'cntrlDown'"/>
                <var name="II_SB_repeat" expr="'n'"/>
                <var name="II_SB_interval" expr="''"/> <!-- Number of milliseconds repeat -->
                <assign name="II_SB_promptID" expr="AUDIO_PATH+'serviceErr.00.wav'+' '+AUDIO_PATH+'tryAgainLater.00.wav'+' '+AUDIO_PATH+'thankYou.00.wav'+' '+AUDIO_PATH+'goodbye.00.wav'"/>
                <dialogstart src="'file:'+LIB_PATH+'audioPlayBack.vxml'" namelist="II_SB_promptID II_SB_repeat II_SB_interval"/>
            </if>
        </transition>

        <transition state="cntrlDown errorEnd" event="dialog.exit" name="evt">
            <!-- We've informed the caller that extension they tried to reach does not exist,
             or we're experiencing a technical difficulty. -->
            <log>INFO: Entered [dialog.exit] with state [<value expr="state"/>]</log>
            <!-- Remove the caller's record in the db prior to exiting -->
            <assign name="inVXML" expr="'n'"/>
            <var name="dltAniRecord" expr="'true'"/>
            <var name="dltDnisRecord" expr="'true'"/>
            <send data="'dialog.user.deleteRecord'" target="session.id" namelist="dltAniRecord dltDnisRecord" delay="'250ms'"/>
        </transition>

        <transition event="connection.disconnected" name="evt">
            <!-- We've detected a hang up. Need to figure out who hung up and then act accordingly -->
            <log>INFO: Entered [connection.disconnected] with state [<value expr="state"/>]</log>
            <log>INFO: Detected hangup</log>
            <log>INFO: Call type [<value expr="callType"/>]</log>
            <var name="resource" expr="'endCall'"/>
            <assign name="endTime" expr="getTimeStamp(3)"/>
            <var name="params" expr="callInfoParams(session.id, '', '')"/>
            <send data="'dialog.user.callInfo'" target="session.id" namelist="params resource"/>
            <assign name="state" expr="'disconnected'"/>
            <if cond="returnApp.length &gt; 0">
                <if cond="evt.connectionid == ibconnid">
                    <assign name="callResult" expr="'Caller Hung Up'"/>
                <else/>
                    <assign name="callResult" expr="'Called Party Hung Up'"/>
                </if>
            </if>
            <if cond="inVXML == 'y'">   <!-- If we're in a vxml dialog, we need to end it -->
                <send data="'dialog.user.terminate'" target="session.id"/>
            </if>
            <send data="'dialog.user.disconnected'" target="session.id" delay="'250ms'"/>
        </transition>

        <transition event="dialog.user.disconnected" name="evt">
            <!-- Here, we start the vxml dialog to update the database -->
            <log>INFO: Entered [dialog.user.disconnected] with state [<value expr="state"/>]</log>
            <if cond="returnApp.length &gt; 0"> <!-- Dial request originated from different listen app. Return to it -->
                <assign name="LISTEN_APP" expr="returnApp"/>
                <assign name="II_SB_ibcallid" expr="''"/>
                <assign name="II_SB_connectionID" expr="''"/>
            	<assign name="importedValue" expr="extendJsonObject(importedValue, 'callResult', callResult)"/>
                <var name="callTime" expr="getTimeDifference(startTime,endTime)"/>
            	<assign name="importedValue" expr="extendJsonObject(importedValue, 'callTime', callTime)"/>
            	<assign name="importedValue" expr="extendJsonObject(importedValue, 'callType', callType)"/>
                <send data="'dialog.user.listenApp'" target="session.id" delay="'250ms'"/>
            <else/>
                <if cond="findMeObj.length &gt; 0">
                    <var name="id" expr="'LSTNAPP_0031'"/>
                    <var name="source" expr="'findMe'"/>
                    <var name="operation" expr="'set'"/>
                    <var name="value" expr="getTimeDifference(startTime,endTime)"/>
                    <send data="'statInfo'" target="getJsonVal(importedValue,'STATcontroller')" targettype="'basichttp'" namelist="id source value operation"/>
                </if>
                <var name="dltAniRecord" expr="'true'"/>
                <var name="dltDnisRecord" expr="'true'"/>
                <send data="'dialog.user.deleteRecord'" target="session.id" namelist="dltAniRecord dltDnisRecord" delay="'250ms'"/>
            </if>
        </transition>

        <transition event="dialog.user.deleteRecord" name="evt">
            <!-- Here, we start the vxml dialog to update the database -->
            <log>INFO: Entered [dialog.user.deleteRecord] with state [<value expr="state"/>]</log>
            <var name="id" expr="obconnid"/>
            <var name="sessionID" expr="''"/>
            <var name="flag" expr="'delete'"/>
            <var name="extension" expr="tmpDNIS"/>
            <if cond="((tmpDNIS.length &lt; EXT_LENGTH) &amp;&amp; (evt.dltDnisRecord == 'true'))">
                <send data="'updateClient'" target="DB_PATH+'activeClients.php'" targettype="'basichttp'" namelist="extension id flag sessionID maxTime"/>
            </if>
            <if cond="((tmpANI.length &lt; EXT_LENGTH)  &amp;&amp; (evt.dltAniRecord == 'true'))">
                <assign name="id" expr="ibconnid"/>
                <assign name="extension" expr="tmpANI"/>
                <send data="'updateClient'" target="DB_PATH+'activeClients.php'" targettype="'basichttp'" namelist="extension id flag sessionID maxTime" delay="'250ms'"/>
            </if>
            <send data="'dialog.user.writeCDR'" target="session.id" delay="'250ms'"/>
            <send data="'dialog.user.endCall'" target="session.id" delay="'500ms'"/>
        </transition>

        <transition event="dialog.user.terminate" name="evt">
            <log>INFO: Entered [dialog.user.terminate] with state [<value expr="state"/>]</log>
   	    	<dialogterminate dialogid="dialogID" immediate="true"/>
        </transition>

        <transition event="dialog.exit" name="evt">
            <log>INFO: Entered [dialog.exit] with state [<value expr="state"/>]</log>
            <assign name="inVXML" expr="'n'"/>
            <if cond="inString(state,waitList,',')">
                <!-- Wait for next event -->
            <else/>
                <send data="'dialog.user.writeCDR'" target="session.id"/>
                <send data="'dialog.user.endCall'" target="session.id" delay="'250ms'"/>
            </if>
        </transition>

        <transition event="fetch.done" name="evt">
            <log>INFO: Fetched document [<value expr="evt.uri"/>]</log>
            <goto fetchid="evt.fetchid" />
        </transition>

		<transition event="dialog.user.callInfo" name="evt">
            <!-- Here, we information about the call to the listten controller -->
            <log>INFO: Entered [dialog.user.callInfo] with state [<value expr="state"/>]</log>
            <var name="params" expr="evt.params"/>
            <var name="resource" expr="evt.resource"/>
            <var name="cntrlURL" expr="getJsonVal(importedValue, 'cntrlURL')"/>
            <send data="'callInfo'" target="getJsonVal(importedValue,'HTTPcontroller')" targettype="'basichttp'" namelist="fromCCXML cntrlURL request resource params"/>
		</transition>

        <transition event="error.send.failed" name="evt" cond="evt.reason == 200">
            <!-- Ignore this error -->
        </transition>

        <transition event="error.*" name="evt">
            <!-- Use catch all error for now -->
            <log>ERROR: Entered [Error*] with state [<value expr="state"/>]</log>
            <log>INFO: Reason [<value expr="evt.reason"/>]</log>
            <!-- Remove the caller's record in the db prior to exiting -->
            <assign name="state" expr="'errorEnd'"/>
            <var name="logText" expr="'dial.ccxml: Global error catch. ANI ['+ tmpANI +'] DNIS ['+ tmpDNIS + ']. Reason [' + evt.reason + ']'"/>
            <assign name="logText" expr="writeLog('DIAL',LINE_NUMBER,logText)"/>
            <log target="logFile"><value expr="logText"/></log>
            <var name="dltAniRecord" expr="'true'"/>
            <var name="dltDnisRecord" expr="'true'"/>
            <send data="'dialog.user.deleteRecord'" target="session.id" namelist="dltAniRecord dltDnisRecord" delay="'250ms'"/>
        </transition>

        <transition event="dialog.user.writeCDR" name="evt">
            <!-- Write Call History and Stat -->
            <log>INFO: Entered [dialog.user.writeCDR] with state [<value expr="state"/>]</log>
            <assign name="ANI" expr="tmpANI"/>
            <assign name="DNIS" expr="tmpDNIS"/>  <!-- Strip off outside line prefix -->
            <var name="resource" expr="'addCallHistory'"/>
            <var name="cntrlURL" expr="getJsonVal(importedValue, 'cntrlURL')"/>
            <var name="organization" expr="getJsonVal(importedValue, 'organization')"/>
            <var name="params" expr="cdrParams(startTime, endTime, callType, ANI, DNIS, callResult, organization)"/>
            <send data="'cdrInfo'" target="getJsonVal(importedValue,'HTTPcontroller')" targettype="'basichttp'" namelist="fromCCXML cntrlURL request resource params"/>

            <var name="id" expr="''"/>
            <var name="source" expr="'ippbx'"/>
            <var name="operation" expr="'set'"/>
            <if cond="((state == 'findMe') &amp;&amp; (LISTEN_APP == 'listen_voicemail'))">
                <var name="value" expr="'1'"/>
                <assign name="source" expr="'findMe'"/>
                <assign name="id" expr="'LSTNAPP_0034'"/> <!-- Find Me went to voicemail -->
                <assign name="operation" expr="'increment'"/>
                <send data="'statInfo'" target="getJsonVal(importedValue,'STATcontroller')" targettype="'basichttp'" namelist="id source value operation"/>
                <assign name="operation" expr="'set'"/>
                <assign name="id" expr="'LSTNAPP_0005'"/> <!-- Call Time in Find Me -->
            <elseif cond="((tmpANI &lt; EXT_LENGTH) &amp;&amp; (tmpDNIS &lt; EXT_LENGTH))"/>
                <assign name="id" expr="'LSTNAPP_0011'"/> <!-- Assume pbx ext to ext call. -->
            <elseif cond="tmpANI &lt; EXT_LENGTH"/>
                <assign name="id" expr="'LSTNAPP_0012'"/> <!-- Assume pbx to external call -->
            <else/>
                <assign name="id" expr="'LSTNAPP_0013'"/>  <!-- Assume external to pbx call -->
            </if>
            <var name="value" expr="getTimeDifference(startTime,endTime)"/>
            <send data="'statInfo'" target="getJsonVal(importedValue,'STATcontroller')" targettype="'basichttp'" namelist="id source value operation"/>
        </transition>

        <transition event="dialog.user.endCall" name="evt">
            <!-- Exit CCXML session -->
            <log>INFO: Entered [dialog.user.endCall] with state [<value expr="state"/>]</log>
            <exit/>
        </transition>

	</eventprocessor>
</ccxml>
