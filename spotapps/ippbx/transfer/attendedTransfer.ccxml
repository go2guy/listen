<?xml version="1.0"?>
<!DOCTYPE ccxml PUBLIC '-//W3C/DTD CCXML 1.0//EN' "http://www.w3.org/TR/ccxml/ccxml.dtd">
<ccxml version="1.0">
    <!-- Last Modified 08/23/2011
       *   @Name	attendedTransfer.ccxml
       *   @Desc	This script handles the logic for do an attended call transfer-->

    <!-- Exports from Spotbuild project -->
    <var name="II_SB_VXML_LIB"/>        <!-- VXML Lib path -->
    <var name="II_SB_status"/>          <!-- status. This variable is used for application control -->
    <var name="II_SB_local"/>           <!-- Dialed ID -->
    <var name="II_SB_remote"/>          <!-- Origination ID -->
    <var name="II_SB_originator"/>      <!-- Call originator -->
    <var name="II_SB_protocol"/>        <!-- Call protocol -->
    <var name="II_SB_connectionID"/>    <!-- II_SB_connectionID. Contains the ID of the connection for this call -->
    <var name="II_SB_type"/>            <!-- II_SB_type.Contains the type of call - VOIP, PSTN -->
    <var name="II_SB_ibcallid"/>        <!-- ibcallid. In bound connection id -->
    <var name="II_SB_transfer"/>        <!-- transfer. Determins if this call is a transfer from another program -->
    <var name="II_SB_projectSource"/>   <!-- projectSource. -->
    <var name="II_SB_obcallid"/>        <!-- obcallid. Out bound connection id -->
    <var name="II_SB_CODE_DIR"/>        <!-- CODE_DIR. Application directory under base directory. Contains all code -->
    <var name="II_SB_line"/>            <!-- Line number processing call -->

    <!-- Values passed in from other ccxml -->
    <var name="ANI"/>           <!-- ANI. Origination ID of current call -->
    <var name="DNIS"/>          <!-- DNIS. Destination ID -->
    <var name="tmpANI"/>        <!-- ANI.-->
    <var name="tmpDNIS"/>       <!-- DNIS.-->
    <var name="ibconnid"/>      <!-- Inbound connection ID -->
    <var name="obconnid"/>      <!-- Outbound connection ID -->
    <var name="URI"/>           <!-- URI. Destination of transfer -->
    <var name="xferSID"/>       <!-- Session ID of new call -->
    <var name="APP_PATH"/>      <!-- App Path. Base application directory -->
    <var name="xferConnID"/>    <!-- Connection ID of party that initiated the transfer -->
    <var name="EXT_LENGTH"/>    <!-- Extensions are less than seven digit numbers -->
    <var name="SB_PATH"/>       <!-- Spotbuild Path. Base directory for spotbuild -->
    <var name="importedValue"/> <!-- Imported Value. Values passed in from Listen application -->

    <!-- Global Vars -->
    <var name="state" expr="'idle'"/>   <!-- State. Used to track which state a transition is in -->
    <var name="record" expr="''"/>
    <var name="dialogID" expr="''"/>    <!-- Dialog ID. Stores value of last VXML dialog that was started -->
    <var name="TRANS_PATH" expr="''"/>  <!-- Transactions Path. Directory for transaction files -->
    <var name="attendedXferID" expr="''"/> <!-- Attended Tranfer ID. ID involved in the transfer -->
    <var name="inVXML" expr="'n'"/>     <!-- In VXML. Determines if this session is currently running a vxml dialog -->
    <var name="LINE_NUMBER" expr="''"/>
    <script src="file:/interact/apps/spotbuild/lib/js/lib.js"/>    <!-- Location of Java script file -->

    <eventprocessor statevariable="state">  <!-- Here is where executable code begins -->
        <transition state="idle" event="ccxml.loaded" name="evt">
            <!-- Load ccxml document. Set variables -->
            <log>INFO: Entered [ccxml.loaded] with state [<value expr="state"/>]</log>
            <log target="status">Attended transfer signal</log>
            <assign name="state" expr="'loaded'"/>
            <assign name="TRANS_PATH" expr="APP_PATH+'transactions/'"/>
            <assign name="LINE_NUMBER" expr="getNextElement(0,session.id,'.')"/>
            <send data="'dialog.user.attendedTransfer'" target="session.id"/>
        </transition>

		<transition event="dialog.user.attendedTransfer" name="evt">
            <!-- In here, we figure out which caller initiated the transfer. This caller will be disconnected. -->
            <log>INFO: Entered [dialog.user.attendedTransfer] with state [<value expr="state"/>]</log>
            <var name="whichID" expr="''"/>
    	    <assign name="state" expr="'attendedtransfer'"/>
            <if cond="ibconnid == xferConnID">  <!-- Inbound (caller) initiated transfer -->
                <assign name="record" expr="ibconnid + '|' + tmpANI"/>
                <assign name="whichID" expr="ibconnid"/>    <!-- Save inbound connection ID, we'll end this connection -->
                <assign name="ibconnid" expr="obconnid"/>   <!-- Make outbound connection ID the new inbound connection ID -->
                <assign name="attendedXferID" expr="ANI"/>  <!-- Save off current origination number for future use -->
            <else/> <!-- Outbound (callee) initiated transfer -->
                <assign name="record" expr="obconnid + '|' + tmpDNIS"/>
                <assign name="whichID" expr="obconnid"/>    <!-- Save onbound connection ID, we'll end this connection -->
                <assign name="attendedXferID" expr="DNIS"/> <!-- Save off current destination number for future use -->
            </if>
			<disconnect connectionid="whichID"/>            <!-- Disconnect ID that initiated transfer -->
		</transition>

        <transition state="attendedtransfer" event="connection.disconnected" name="evt">
            <!-- We've received the disconnect event -->
            <log>INFO: Entered [connection.disconnected] with state [<value expr="state"/>]</log>
            <!-- Let's remove the disconnected caller's info from the active clients table -->
            <send data="'dialog.user.updateClientRecord'" target="session.id"/>
        </transition>

        <transition event="dialog.user.updateClientRecord" name="evt">
            <!-- Here, we start the vxml dialog to update the database -->
            <log>INFO: Entered [dialog.user.updateClientRecord] with state [<value expr="state"/>]</log>
            <var name="flag" expr="'delete'"/>
   	   		<dialogstart src="'file:'+TRANS_PATH+'dbCall.vxml'" namelist="flag record EXT_LENGTH"/>
        </transition>

        <transition state="attendedtransfer" event="dialog.exit" name="evt">
            <!-- Back from removing disconnected caller's info. Let's join the remaining caller to
            a voice channel --> 
            <log>INFO: Entered [dialog.exit] with state [<value expr="state"/>]</log>
            <assign name="inVXML" expr="'n'"/>
            <join id1="ibconnid" id2="'VXML_CHANNEL'"/>
        </transition>

        <transition state="attendedtransfer" event="conference.joined">
            <!-- Our join attempt was successful. Next, we'll send control to the dial.ccxml script. -->
            <log>INFO: Entered [conference.joined] with state [<value expr="state"/>]</log>
            <var name="moveRequestSID" expr="session.id"/>  <!-- Save off current session id for future use -->
            <if cond="attendedXferID == ANI">               <!-- If the original caller initiated the transfer -->
                <assign name="ANI" expr="DNIS"/>            <!-- Make the called party the new originator -->
                <assign name="tmpANI" expr="getnum(ANI)"/>
            </if>
            <assign name="DNIS" expr="URI"/>                <!-- Save off DNIS that's part of transfer -->
            <assign name="tmpDNIS" expr="getnum(URI)"/>
            <send data="'dialog.user.moveRequest'" target="xferSID" namelist="moveRequestSID"/> <!-- This send event should end up in dial.ccxml -->
        </transition>

        <transition event="dialog.user.moveSuccessful" name="evt">
            <!-- Our move was successful. Next, we'll join the connection ids of the two parties -->
            <log>INFO: Entered [dialog.user.moveSuccessful] with state [<value expr="state"/>]</log>
    	    <assign name="state" expr="'joinID'"/>
            <assign name="obconnid" expr="evt.obconnid"/>
            <if cond="obconnid == undefined">
                <!-- Assume caller is trying to do an attended transfer without completing a connection.
                Let's attempt to transfer to destination voicemail box -->
                <var name="callType" expr="''"/>
                <var name="origDNIS" expr="tmpDNIS"/>
                <fetch next="'file:'+APP_PATH+'dial.ccxml'" namelist="SB_PATH importedValue APP_PATH EXT_LENGTH ibconnid obconnid tmpDNIS DNIS tmpANI ANI callType origDNIS  II_SB_line II_SB_CODE_DIR II_SB_ibcallid II_SB_obcallid II_SB_projectSource II_SB_transfer II_SB_VXML_LIB II_SB_status II_SB_local II_SB_remote II_SB_originator II_SB_protocol II_SB_connectionID II_SB_type"/>
            <else/>
                <join id1="ibconnid" id2="obconnid"/>
            </if>
        </transition>

		<transition state="joinID" event="conference.joined" name="evt">
            <!-- The join was successful. Here, we send control to dial.ccxml -->
            <log>INFO: Entered [conference.joined] with state [<value expr="state"/>]</log>
            <var name="callType" expr="'fromXfer'"/>
            <fetch next="'file:'+APP_PATH+'dial.ccxml'" namelist="SB_PATH importedValue APP_PATH EXT_LENGTH ibconnid obconnid tmpDNIS DNIS tmpANI ANI callType II_SB_line II_SB_CODE_DIR II_SB_ibcallid II_SB_obcallid II_SB_projectSource II_SB_transfer II_SB_VXML_LIB II_SB_status II_SB_local II_SB_remote II_SB_originator II_SB_protocol II_SB_connectionID II_SB_type"/>
		</transition>

        <transition event="dialog.user.moveFailed" name="evt">
            <!-- Our move failed. -->
            <log>INFO: Entered [dialog.user.moveFailed] with state [<value expr="state"/>]</log>
    	    <assign name="state" expr="'endCall'"/>
            <assign name="record" expr="ibconnid + '|' + tmpANI + ',' + obconnid + '|' + tmpDNIS"/>
            <send data="'dialog.user.updateClientRecord'" target="session.id"/>
        </transition>

        <transition event="connection.disconnected" name="evt">
            <!-- Got a hang up. Let's remove any records associated with this call in the db -->
            <log>INFO: Entered [connection.disconnected] with state [<value expr="state"/>]</log>
            <log>INFO: Detected hangup</log>
    	    <assign name="state" expr="'endCall'"/>
            <assign name="record" expr="ibconnid + '|' + tmpANI + ',' + obconnid + '|' + tmpDNIS"/>
            <send data="'dialog.user.updateClientRecord'" target="session.id"/>
        </transition>

        <transition event="dialog.exit" name="evt">
            <log>INFO: Entered [dialog.exit] with state [<value expr="state"/>]</log>
            <assign name="inVXML" expr="'n'"/>
            <send data="'dialog.user.endCall'" target="session.id" />
        </transition>

        <transition event="dialog.started" name="evt">
            <log>INFO: Entered [dialog.started] with state [<value expr="state"/>]</log>
            <assign name="dialogID" expr="evt.dialogid"/>
            <assign name="inVXML" expr="'y'"/>
        </transition>

        <transition event="dialog.user.terminate" name="evt">
            <log>INFO: Entered [dialog.user.terminate] with state [<value expr="state"/>]</log>
   	    	<dialogterminate dialogid="dialogID" immediate="true"/>
        </transition>

        <transition event="fetch.done" name="evt">
            <log>INFO: Fetched document [<value expr="evt.uri"/>]</log>
            <goto fetchid="evt.fetchid" />
        </transition>

        <transition event="error.send.failed" name="evt" cond="evt.reason == 200">
            <!-- Ignore this error -->
        </transition>

        <transition event="error.*" name="evt">
            <!-- Use catch all error for now -->
            <log>ERROR: Entered [Error*] with state [<value expr="state"/>]</log>
            <log>INFO: Reason [<value expr="evt.reason"/>]</log>
            <assign name="state" expr="'errorEnd'"/>
            <var name="logText" expr="'attendedTransfer.ccxml: Global error catch. ANI ['+ tmpANI +'] DNIS ['+ tmpDNIS + ']. Reason [' + evt.reason + ']'"/>
            <assign name="logText" expr="writeLog('IPPBX',LINE_NUMBER,logText)"/>
            <dialogstart src="'file:/interact/apps/spotbuild/ippbx/writeExceptionLog.vxml'" namelist="logText"/>
        </transition>

        <transition state="errorEnd" event="dialog.exit" name="evt">
            <log>INFO: Entered [dialog.exit] with state [<value expr="state"/>]</log>
            <assign name="inVXML" expr="'n'"/>
            <!-- Remove user's info from db b/4 exiting -->
    	    <assign name="state" expr="'endCall'"/>
            <assign name="record" expr="ibconnid + '|' + tmpANI + ',' + obconnid + '|' + tmpDNIS"/>
            <send data="'dialog.user.updateClientRecord'" target="session.id"/>
        </transition>

        <transition event="dialog.user.endCall" name="evt">
            <!-- Exit CCXML session -->
            <log>INFO: Entered [dialog.user.endCall] with state [<value expr="state"/>]</log>
            <exit/>
        </transition>

	</eventprocessor>
</ccxml>
