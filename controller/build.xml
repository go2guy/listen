<project name="listen-controller" default="war">
  <property name="src.dir"         value="${basedir}/src"/>
  <property name="build.dir"       value="${basedir}/build"/>
  <property name="lib.dir"         value="${basedir}/lib"/>
  <property name="target.dir"      value="${basedir}/target"/>
  <property name="deploy.dir"      value="/interact/listen"/>
  <property name="rpm.staging.dir" value="${target.dir}/staging"/>
  <property name="winstone.jar"    value="winstone-0.9.10.jar"/>
  <property name="war.staging.dir" value="${target.dir}/war/staging"/>

  <path id="javac.classpath">
    <fileset dir="${lib.dir}" includes="**/*.jar"/>
    <pathelement path="${build.dir}"/>
  </path>


  <target name="clean" description="--> Removes build artifacts created by this script">
    <delete dir="${build.dir}" failonerror="false"/>
    <delete dir="${target.dir}" failonerror="false"/>
    <delete dir="${rpm.staging.dir}" failonerror="false"/>
    <delete dir="${war.staging.dir}" failonerror="false"/>
    <delete failonerror="false">
      <fileset dir="ii_artifacts" includes="**/*"/>
    </delete>
  </target>


  <target name="compile" description="--> Compiles source code into bytecode">
    <mkdir dir="${build.dir}"/>
    <javac destdir="${build.dir}"
           failonerror="true"
           includeAntRuntime="false">
       <src path="${src.dir}/main/java"/>
       <classpath refid="javac.classpath"/>
    </javac>
  </target>


  <target name="test" depends="compile" description="--> Runs unit tests">
    <mkdir dir="${target.dir}/junit"/>

    <junit printsummary="on"
           fork="yes"
           failureproperty="junit.failures"
           showoutput="true">
      <formatter type="xml"/>
      <classpath refid="javac.classpath"/>

      <batchtest fork="yes"
                 todir="${target.dir}/junit">
        <fileset dir="${src.dir}/test/java" includes="**/*Test.java"/>
      </batchtest>
    </junit>

    <junitreport todir="${target.dir}/junit">
      <fileset dir="${target.dir}/junit" includes="TEST-*.xml"/>
      <report format="frames" todir="${target.dir}/junit"/>
    </junitreport>
  </target>


  <target name="war" depends="compile" description="--> Packages distributable war file">
    <mkdir dir="${target.dir}"/>
    <war destfile="${target.dir}/listen-controller.war" webxml="${src.dir}/main/webapp/WEB-INF/web.xml">
      <fileset dir="${src.dir}/main/webapp" includes="**/*"/>
      <classes dir="${build.dir}" excludes="**/*Test.class"/>
      <lib dir="${lib.dir}/runtime"/>
    </war>
  </target>

  <target name="jar" depends="war" description="--> Creates an executable jar file with embedded winstone container">
    <mkdir dir="${war.staging.dir}"/>
    <unwar src="${lib.dir}/build/${winstone.jar}" dest="${war.staging.dir}"/>
    <copy file="${target.dir}/listen-controller.war" tofile="${war.staging.dir}/embedded.war"/>
    <jar destfile="${target.dir}/listen-controller.jar" manifest="${war.staging.dir}/META-INF/MANIFEST.MF">
      <fileset dir="${war.staging.dir}" excludes="META-INF/**"/>
    </jar>
  </target>


  <target name="deploy" depends="jar" description="--> Deploys the application">
    <mkdir dir="${deploy.dir}"/>
    <copy file="${target.dir}/listen-controller.war" todir="${deploy.dir}" verbose="true"/>
    <copy file="${target.dir}/listen-controller.jar" todir="${deploy.dir}" verbose="true"/>
  </target>


  <target name="undeploy" description="--> Removes any deployed artifacts">
    <delete dir="${deploy.dir}"/>
  </target>


  <target name="-rpmbuild" depends="deploy">
    <mkdir dir="${rpm.staging.dir}/BUILD"/>

    <exec executable="rpmbuild" failonerror="true">
      <env key="VERSION" value="1.0"/>
      <env key="RELEASE" value="trunk"/>
      <env key="TOPDIR" value="${rpm.staging.dir}"/>
      <arg line="-bb --buildroot ${rpm.staging.dir}/BUILD ${basedir}/controller.spec"/>
    </exec>

    <copy todir="ii_artifacts" overwrite="true" flatten="true">
      <fileset dir="${rpm.staging.dir}" includes="**/*.rpm"/>
      <fileset dir="${basedir}" includes="*.uia"/>
    </copy>
  </target>


  <target name="rpm" description="--> Creates rpm">
    <!-- hack to override properties -->
    <antcall target="-rpmbuild">
      <param name="deploy.dir" value="${rpm.staging.dir}/BUILD/interact/listen"/>
    </antcall>
  </target>
</project>